import asyncio
import random

import discord
import sqlalchemy
from discord.errors import NotFound
from discord.ext import commands

import db_session
from PLyBot import Bot, Cog, join_string, HRF, BotEmbed, Context
from db_session import SqlAlchemyBase, BaseConfigMix


class LotteryConfig(SqlAlchemyBase, BaseConfigMix):
    __tablename__ = "lottery_configs"

    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('guilds.id'),
                                 primary_key=True, nullable=False)
    access = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{}')
    active_until = sqlalchemy.Column(sqlalchemy.Date, nullable=True, default=None)


# TODO: –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –°–¥–µ–ª–∞—Ç—å embed –ø–æ —Ü–≤–µ—Ç—É –±–æ—Ç–∞
class LotteryCog(Cog, name="–õ–æ—Ç–µ—Ä–µ–∏"):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–∏–∑–æ–≤. –í –Ω—ë–º –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑—ã–≥—Ä–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ —Ä–æ–ª—å.
    """

    def __init__(self, bot: Bot):
        super().__init__(bot, cls_config=LotteryConfig, emoji_icon='üéâ')

    # TODO: –ó–∞–≥–ª—É—à–∫–∞
    @commands.command('—Ä–æ–∑—ã–≥—Ä—ã—à_–¥–µ–Ω–µ–≥', aliases=['add_lottery_moneys', 'lottery_moneys'], enabled=False)
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_add_raffle_moneys(self, ctx: Context, moneys: int, seconds: int, *title: str):
        """
        –°–æ–∑–¥–∞—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –¥–µ–Ω—å–≥–∏ (seconds –≤ —Å–µ–∫, title –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å)
        (**!!–í–ù–ò–ú–ê–ù–ò–ï** –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–æ–¥—É–ª—å '–≠–∫–æ–Ω–æ–º–∏–∫–∞')
        """

        title = join_string(title, f"–í–Ω–∏–º–∞–Ω–∏–µ! –î–µ–Ω–µ–∂–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!")
        assert seconds >= 0, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
        await self._handle_raffle_moneys(ctx, moneys, seconds, title)

    @staticmethod
    async def _handle_raffle_moneys(ctx: Context, moneys: int, delay: int, title: str):
        economy_cog: Cog = ctx.bot.get_cog('–≠–∫–æ–Ω–æ–º–∏–∫–∞')
        assert economy_cog is not None, "–î–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –º–æ–¥—É–ª—å '–≠–∫–æ–Ω–æ–º–∏–∫–∞'"
        assert await economy_cog.cog_check(ctx), "–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞"

        from .economy import EconomyCog, Balance
        economy_cog: EconomyCog

        with db_session.create_session() as session:
            config = economy_cog.get_config(session, ctx.guild)
            emote = "‚úÖ"
            embed = BotEmbed(ctx=ctx,
                             title=title,
                             description=f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {emote}",
                             colour=discord.colour.Color.purple()
                             )
            embed.add_field(name="–°—É–º–º–∞", value=HRF.number(moneys) + " " + config.currency_icon)
            embed.add_field(name="–ò—Ç–æ–≥–∏ —á–µ—Ä–µ–∑",
                            value=f"{delay // 60 // 60} —á. {delay // 60 % 60} –º–∏–Ω. {delay % 60} —Å–µ–∫.")
            message = await ctx.send(embed=embed)
            await message.add_reaction(emote)

        await asyncio.sleep(delay)

        try:
            message: discord.Message = await message.channel.fetch_message(message.id)
        except NotFound:
            return

        for reaction in message.reactions:
            reaction: discord.Reaction
            if reaction.emoji != emote:
                continue
            members = list(filter(lambda x: x is not None,
                                  map(lambda m: message.guild.get_member(m.id),
                                      filter(lambda u: not u.bot, await reaction.users().flatten()))))
            if not members:
                break
            member = random.choice(members)
            with db_session.create_session() as session:
                config = economy_cog.get_config(session, ctx.guild)
                embed = BotEmbed(ctx=ctx,
                                 title="–ò —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∏–∑—ë—Ä!",
                                 description=f"{member.mention} –ø–æ–ª—É—á–∞–µ—Ç {HRF.number(moneys)} "
                                             f"{config.currency_icon} –Ω–∞ —Å—á—ë—Ç –±–∞–Ω–∫–∞",
                                 colour=discord.colour.Color.dark_purple()
                                 )
                await ctx.send(embed=embed)
                Balance.get(session, member).add_dep(moneys)
                session.commit()
            break
        await message.delete()

    @staticmethod
    async def _handle_raffle(ctx: Context, role: discord.Role, delay: int, title: str):
        emote = "‚úÖ"
        embed = BotEmbed(ctx=ctx,
                         title=title,
                         description=f"–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {emote}",
                         colour=discord.colour.Color.purple()
                         )
        embed.add_field(name="–†–æ–ª—å", value=role.mention)
        embed.add_field(name="–ò—Ç–æ–≥–∏ —á–µ—Ä–µ–∑", value=f"{delay} —Å–µ–∫.")
        message = await ctx.send(embed=embed)
        await message.add_reaction(emote)
        await asyncio.sleep(delay)

        try:
            message: discord.Message = await message.channel.fetch_message(message.id)
        except NotFound:
            return

        for reaction in message.reactions:
            reaction: discord.Reaction
            if reaction.emoji != emote:
                continue
            members = list(filter(lambda x: x is not None,
                                  map(lambda m: message.guild.get_member(m.id),
                                      filter(lambda u: not u.bot, await reaction.users().flatten()))))
            if not members:
                break
            member = random.choice(members)
            embed = BotEmbed(ctx=ctx,
                             title="–ò —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∏–∑—ë—Ä!",
                             description=f"{member.mention} –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å {role.mention}",
                             colour=discord.colour.Color.dark_purple()
                             )
            await ctx.send(embed=embed)
            await member.add_roles(role)
            break
        await message.delete()

    @commands.cooldown(1, 5)
    @commands.command(name='–ª–æ—Ç–µ—Ä–µ—è', aliases=['add_lottery', 'lottery'])
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True)
    async def _cmd_lottery(self, ctx: Context, role: discord.Role, seconds: int, *title: str):
        """
        –°–æ–∑–¥–∞—ë—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —Ä–æ–ª—å (seconds –≤ —Å–µ–∫, title –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å)
        """

        title = join_string(title, f"–í–Ω–∏–º–∞–Ω–∏–µ! –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —Ä–æ–ª—å!")
        assert seconds >= 0, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"

        assert ctx.author.top_role > role or ctx.author.guild_permissions.administrator, \
            "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ –≤–∞—à–µ–π"

        assert ctx.guild.get_member(self.bot.user.id).top_role > role, \
            "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –¥–ª—è –º–µ–Ω—è"

        await self._handle_raffle(ctx, role, seconds, title)


async def setup(bot: Bot):
    await bot.add_cog(LotteryCog(bot))
