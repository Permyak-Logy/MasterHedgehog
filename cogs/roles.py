from typing import Union, Optional, List

import discord
import sqlalchemy
from discord.errors import NotFound, Forbidden
from discord.ext import commands

import db_session
from PLyBot import Bot, BotEmbed
from PLyBot import Cog, Context
from PLyBot.const import EMOJI_NUMBERS
from db_session import SqlAlchemyBase, BaseConfigMix, NONE
from db_session.base import Member


class RolesConfig(SqlAlchemyBase, BaseConfigMix):
    __tablename__ = "roles_configs"

    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('guilds.id'),
                                 primary_key=True, nullable=False)

    auto_roles = sqlalchemy.Column(sqlalchemy.String, nullable=True)

    return_old_roles = sqlalchemy.Column(sqlalchemy.Boolean, nullable=False, default=False)

    roles = sqlalchemy.Column(sqlalchemy.String, nullable=True)
    access = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{}')

    active_until = sqlalchemy.Column(sqlalchemy.Date, nullable=True, default=None)

    def __str__(self):
        return f'{self.__class__.__name__}(id={self.guild_id} roles={self.active_until})'

    def __repr__(self):
        return self.__class__.__name__

    def get_roles(self, bot: Bot) -> list:
        guild = self.get_guild(bot)
        if self.roles != NONE and isinstance(guild, discord.Guild):
            roles = self.roles
            roles = list(filter(bool, map(guild.get_role, list(map(int, roles.split(","))))))
            return roles
        return []

    def set_roles(self, *roles: discord.Role):
        self.roles = ",".join(filter(bool, [str(role.id) for role in roles])) or None

    def get_autoroles(self, bot: Bot):
        guild = self.get_guild(bot)
        if self.auto_roles != NONE and isinstance(guild, discord.Guild):
            roles = self.auto_roles
            roles = list(filter(bool, map(guild.get_role, list(map(int, roles.split(","))))))
            return roles
        return []

    def set_autoroles(self, *roles: discord.Role):
        self.auto_roles = ",".join(filter(bool, [str(role.id) for role in roles])) or None


class NumRoleForReaction(SqlAlchemyBase):
    __tablename__ = "role_for_reaction"
    config_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('roles_configs.guild_id'),
                                  primary_key=True)
    channel_id = sqlalchemy.Column(sqlalchemy.Integer, nullable=False)
    message_id = sqlalchemy.Column(sqlalchemy.Integer, nullable=False, primary_key=True)
    roles = sqlalchemy.Column(sqlalchemy.String, nullable=True)

    def get_roles(self, bot: Bot) -> list:
        # noinspection PyTypeChecker
        guild = bot.get_guild(self.config_id)
        if self.roles != NONE and isinstance(guild, discord.Guild):
            roles = self.roles
            roles = list(map(guild.get_role, list(map(int, roles.split(",")))))
            return roles
        return []

    def set_roles(self, *roles: discord.Role):
        self.roles = ",".join(filter(bool, [str(role.id) for role in roles])) or None



class RolesMember:  # (SqlAlchemyBase):
    __tablename__ = "roles_members"
    config_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('role'))

    member_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('role'))

    roles_ids = sqlalchemy.Column(sqlalchemy.String)

    def get_roles(self, bot: discord.Client) -> List[discord.Role]:
        # noinspection PyTypeChecker
        guild: discord.Guild = bot.get_guild(self.config_id)
        if guild is None:
            return []
        roles = self.roles_ids
        return list(filter(bool, map(guild.get_role, map(int, (roles or "").split(";")))))

    def set_roles(self, roles: list):
        if roles:
            self.roles_ids = ";".join(map(str, map(lambda r: r.id, roles)))
        else:
            self.roles_ids = None


class RolesCog(Cog, name='–†–æ–ª–∏'):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ. –î–ª—è –∏—Ö —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ
    —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é `!!=—Ä–æ–ª–∏`

    ||–ü–æ —Ç–µ—Ö. –ø—Ä–∏—á–∏–Ω–∞–º –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ —Ä–æ–ª–∏ –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞—é—Ç—Å—è||
    """

    def __init__(self, bot: Bot):
        super().__init__(bot, cls_config=RolesConfig, emoji_icon='üÉè')

    def get_config(self, session: db_session.Session, guild: Union[discord.Guild, int]) -> Optional[RolesConfig]:
        return super().get_config(session, guild)

    @commands.Cog.listener('on_ready')
    async def update_member_roles(self):
        with db_session.create_session() as _:
            pass

    @commands.Cog.listener('on_ready')
    async def clear_unavailable_rfr(self):
        with db_session.create_session() as session:
            all_rfr = session.query(NumRoleForReaction).all()
            for rfr in all_rfr:
                channel = self.bot.get_channel(rfr.channel_id)
                try:
                    await channel.fetch_message(rfr.message_id)
                except (AttributeError, NotFound):
                    session.delete(rfr)
            session.commit()

    @commands.Cog.listener('on_raw_bulk_message_delete')
    async def on_raw_bulk_message_delete(self, payload: discord.RawBulkMessageDeleteEvent):
        with db_session.create_session() as session:
            all_rfr = session.query(RoleForReaction).filter(RoleForReaction.message_id.in_(payload.message_ids)).all()
            for rfr in all_rfr:
                session.delete(rfr)
            session.commit()

    @commands.Cog.listener('on_raw_message_delete')
    async def on_raw_message_delete(self, payload: discord.RawMessageDeleteEvent):
        with db_session.create_session() as session:
            rfr = session.query(NumRoleForReaction).filter(NumRoleForReaction.message_id == payload.message_id).first()
            if rfr:
                session.delete(rfr)
            session.commit()

    @commands.Cog.listener('on_raw_reaction_add')
    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):
        guild = self.bot.get_guild(payload.guild_id)
        if not guild:
            return

        with db_session.create_session() as session:
            config = self.get_config(session, guild)
            if not config:
                return
            for i, reaction in EMOJI_NUMBERS.items():
                if payload.emoji.name == reaction:
                    rfr: RoleForReaction = session.query(RoleForReaction).filter(
                        RoleForReaction.message_id == payload.message_id).first()
                    if rfr:
                        roles = rfr.get_roles(self.bot)
                        try:
                            member = guild.get_member(payload.user_id)
                            await member.add_roles(roles[i - 1])
                        except (IndexError, Forbidden, AttributeError):
                            pass
                    break

    @commands.Cog.listener('on_raw_reaction_remove')
    async def on_raw_reaction_remove(self, payload: discord.RawReactionActionEvent):
        guild = self.bot.get_guild(payload.guild_id)
        if not guild:
            return

        with db_session.create_session() as session:
            config = self.get_config(session, guild)
            if not config:
                return
            for i, reaction in EMOJI_NUMBERS.items():
                if payload.emoji.name == reaction:
                    rfr: RoleForReaction = session.query(RoleForReaction).filter(
                        RoleForReaction.message_id == payload.message_id).first()
                    if rfr:
                        roles = rfr.get_roles(self.bot)
                        try:
                            member = guild.get_member(payload.user_id)
                            await member.remove_roles(roles[i - 1])
                        except (IndexError, Forbidden, AttributeError):
                            pass
                    break

    @commands.command(name='–∞–≤—Ç–æ—Ä–æ–ª–∏', aliases=['autoroles'])
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True)
    async def auto_old_roles(self, ctx: Context):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–µ
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            config.return_old_roles = not config.return_old_roles
            if not config.return_old_roles:
                # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à –ª—é–¥–µ–π
                for member in session.query(Member).filter(Member.guild_id == ctx.guild.id,
                                                           Member.joined.is_(False)).all():
                    session.delete(member)
            session.commit()
            await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ", colour=self.bot.colour,
                                          description="–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏").add_field(
                name="–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ –≤—ã–¥–∞—á–∏",
                value="–í–∫–ª" if config.return_old_roles else "–í—ã–∫–ª"))

    @commands.command(name='—Ä–æ–ª—å–ø–æ—Ä–µ–∞–∫—Ü–∏–∏', aliases=['role_for_reaction', 'rfr', '—Ä–ø—Ä'])
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True, manage_messages=True)
    async def role_for_reaction(self, ctx: commands.Context, title: str, description: str, *roles: discord.Role):
        """
        –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–æ–ª–∏ –ø–æ —Ä–µ–∞–∫—Ü–∏–∏
        """
        assert 0 < len(roles) <= 10, "–ö–æ–ª-–≤–æ —Ä–æ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
        assert all(map(lambda r: ctx.author.top_role > r, roles)) or ctx.guild.owner == ctx.author, \
            "–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∏–∂–µ –≤–∞—à–µ–π"
        me = ctx.guild.get_member(self.bot.user.id)
        assert all(map(lambda r: me.top_role > r and not r.managed, roles)), "–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å –æ–¥–Ω—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"
        description += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è\n\n" + "\n".join(
            f"{EMOJI_NUMBERS[i + 1]} - {role.mention}" for i, role in enumerate(roles)
        )
        embed = BotEmbed(ctx=ctx,
                         title=title,
                         description=description,
                         colour=self.bot.colour
                         )
        message = await ctx.send(embed=embed)
        session = db_session.create_session()
        config = self.get_config(session, ctx.guild)
        rfr = RoleForReaction()
        rfr.config_id = config.guild_id
        rfr.channel_id = message.channel.id
        rfr.message_id = message.id
        rfr.set_roles(*roles)
        for i, role in enumerate(roles):
            await message.add_reaction(EMOJI_NUMBERS[i + 1])
        session.add(rfr)
        session.commit()
        session.close()
        await ctx.message.delete()

    @commands.command(name='—Ä–æ–ª–∏', aliases=['roles'])
    @commands.guild_only()
    @commands.cooldown(1, 5)
    @commands.bot_has_permissions(manage_roles=True)
    async def roles(self, ctx: commands.Context):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏
        """
        session = db_session.create_session()
        config = self.get_config(session, ctx.guild)
        roles = config.get_roles(ctx.bot)
        if not roles:
            embed = BotEmbed(ctx=ctx, title="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π",
                             description=f'–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                                         f'–∫–æ–º–∞–Ω–¥–æ–π `{ctx.prefix}'
                                         f'{self.bot.get_command("set_roles")}`',
                             colour=self.bot.colour)
            await ctx.send(embed=embed)
        else:
            embed = BotEmbed(ctx=ctx, title="–°–ø–∏—Å–æ–∫ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö —Ä–æ–ª–µ–π",
                             description="\n".join(role.mention for role in roles),
                             colour=self.bot.colour)
            await ctx.send(embed=embed)

    @commands.command(name='=—Ä–æ–ª–∏', aliases=['=roles', 'setroles', 'set_roles'])
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True)
    async def set_roles(self, ctx: commands.Context, *roles: discord.Role):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–¥–∞–≤–∞–µ–º—ã–µ —Ä–æ–ª–∏
        """
        session = db_session.create_session()
        config = self.get_config(session, ctx.guild)
        config.set_roles(*roles)
        session.commit()
        session.close()

        embed = BotEmbed(ctx=ctx,
                         title="–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω!",
                         description=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ "
                                     f"`{ctx.prefix}{self.bot.get_command('roles')}`",
                         colour=self.bot.colour
                         )
        await ctx.send(embed=embed)

    @commands.command(name='+—Ä–æ–ª–∏', aliases=['+roles', 'addroles', 'add_roles'])
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    async def add_roles(self, ctx: commands.Context, *roles: discord.Role):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        """
        session = db_session.create_session()
        config = self.get_config(session, ctx.guild)
        acc_roles = config.get_roles(ctx.bot)
        session.close()

        for role in roles:
            assert role not in ctx.author.roles, \
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å '{role}'"
            assert role in acc_roles, f"–†–æ–ª—å '{role}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω–∞"
            assert role < ctx.guild.get_member(self.bot.user.id).top_role, \
                f"–Ø –Ω–µ –º–æ–≥—É –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å '{role}', —Ç.–∫. –æ–Ω–∞ –≤—ã—à–µ —á–µ–º —è"
        await ctx.author.add_roles(*roles)
        await ctx.send(
            embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ", description=f"–í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ {len(set(roles))} —Ä–æ–ª–µ–π",
                           colour=self.bot.colour))

    @commands.command(name='-—Ä–æ–ª–∏', aliases=['-roles', 'rmroles', 'rm_roles'])
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    async def remove_role(self, ctx: commands.Context, *roles: discord.Role):
        """
        –£–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        """
        session = db_session.create_session()
        config = self.get_config(session, ctx.guild)
        acc_roles = config.get_roles(ctx.bot)
        session.close()

        for role in roles:
            assert role in ctx.author.roles, \
                f"–†–æ–ª–∏ {role} –Ω–µ—Ç —É –≤–∞—Å"
            assert role in acc_roles, f"–†–æ–ª—å '{role}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–Ω—è—Ç–∞"
            assert role < ctx.guild.get_member(self.bot.user.id).top_role, \
                f"–Ø –Ω–µ –º–æ–≥—É —Å–Ω—è—Ç—å —Ä–æ–ª—å {role}, —Ç.–∫. –æ–Ω–∞ –≤—ã—à–µ —á–µ–º —è"
        await ctx.author.remove_roles(*roles)
        await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ",
                                      description=f"–£ –≤–∞—Å —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–æ {len(set(roles))} —Ä–æ–ª–µ–π",
                                      colour=self.bot.colour))

    @commands.command(name='+—Ä–æ–ª–∏_–≤—Å–µ–º', aliases=['+roles_all'])
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    async def add_roles_for_everyone(self, ctx: commands.Context, *roles: discord.Role):
        """
        –í—ã–¥–∞—ë—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """
        for role in roles:
            assert role < ctx.guild.get_member(self.bot.user.id).top_role, \
                f"–Ø –Ω–µ –º–æ–≥—É –¥–∞—Ç—å —Ä–æ–ª—å {role}, —Ç.–∫. –æ–Ω–∞ –≤—ã—à–µ —á–µ–º —è"
        async with ctx.typing():
            for member in ctx.guild.members:
                member: discord.Member
                await member.add_roles(*roles)
        await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ",
                                      description=f"–í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã —Ä–æ–ª–∏",
                                      colour=self.bot.colour))

    @commands.command(name='-—Ä–æ–ª–∏_–≤—Å–µ–º', aliases=['-roles_all'])
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    async def remove_roles_for_everyone(self, ctx: commands.Context, *roles: discord.Role):
        """
        –£–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ —É –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        """
        for role in roles:
            assert role < ctx.guild.get_member(self.bot.user.id).top_role, \
                f"–Ø –Ω–µ –º–æ–≥—É —Å–Ω—è—Ç—å —Ä–æ–ª—å {role}, —Ç.–∫. –æ–Ω–∞ –≤—ã—à–µ —á–µ–º —è"
        async with ctx.typing():
            for member in ctx.guild.members:
                member: discord.Member
                await member.remove_roles(*roles)
        await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ",
                                      description=f"–£ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Ä–æ–ª–∏",
                                      colour=self.bot.colour))

    @commands.command(name='-—Ä–æ–ª–∏_–≤—Å–µ–º_–∏—Å–∫–ª', aliases=['-roles_all_exc'])
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    async def remove_roles_for_everyone(self, ctx: commands.Context, *roles: discord.Role):
        """
        –£–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ —É –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Ä–æ–ª–∏ –∏ –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ
        """
        for role in roles:
            assert role < ctx.guild.get_member(self.bot.user.id).top_role, \
                f"–Ø –Ω–µ –º–æ–≥—É —Å–Ω—è—Ç—å —Ä–æ–ª—å {role}, —Ç.–∫. –æ–Ω–∞ –≤—ã—à–µ —á–µ–º —è"
        async with ctx.typing():
            for member in ctx.guild.members:
                member: discord.Member

                get_id = lambda x: x.id
                result = set(map(get_id, filter(lambda x: x.name != '@everyone', member.roles))) - set(
                    map(get_id, roles))
                if not result:
                    await member.remove_roles(*roles)
        await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ",
                                      description=f"–£ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Ä–æ–ª–∏",
                                      colour=self.bot.colour))

    @commands.group(name='auto_roles')
    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    async def auto_roles(self, ctx: Context):
        pass

    @commands.guild_only()
    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    async def set_auto_roles(self):
        pass


# TODO: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π

async def setup(bot: Bot):
    await bot.add_cog(RolesCog(bot))
