import datetime
import json
import math
import random
import re
from typing import Optional, Union

import discord
import sqlalchemy
from discord.ext import commands
from discord.ext.commands import BucketType

import db_session
from PLyBot import Bot, Cog, join_string, HRF, Context, BotEmbed
from PLyBot.const import EMOJI_NUMBERS
from db_session import BaseConfigMix, SqlAlchemyBase, bigint, Session


# TODO: –†–æ–ª–∏ –±—É—Å—Ç–µ—Ä—ã

# TODO: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏
# TODO: –°–¥–µ–ª–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª–∞—Å—Å–∞
# TODO: Pymorphy

class EconomyConfig(SqlAlchemyBase, BaseConfigMix):
    __tablename__ = "economy_configs"

    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('guilds.id'),
                                 primary_key=True, nullable=False)
    shop = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{"shop": []}')
    currency_icon = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='üíé')
    currency_name = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='–∞–ª–º.')

    access = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{}')
    active_until = sqlalchemy.Column(sqlalchemy.Date, nullable=True, default=None)

    def get_shop(self, ctx: commands.Context):
        shop = json.loads(self.shop)
        for item in shop['shop']:
            item["role"] = ctx.guild.get_role(item['role'])
        return {"shop": list(filter(lambda x: bool(x["role"]), shop['shop']))}

    def set_shop(self, data: dict):
        for item in data['shop']:
            item["role"] = item["role"].id
        self.shop = json.dumps(data)


class LuckBox(SqlAlchemyBase):
    __tablename__ = "luck_boxes_economy"
    config_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('economy_configs.guild_id'),
                                  primary_key=True)
    ctrl_msg = sqlalchemy.Column(sqlalchemy.Integer, unique=True, primary_key=True)

    data_boxes = sqlalchemy.Column(sqlalchemy.String)

    def set_data_boxes(self, data: dict):
        self.data_boxes = json.dumps(data, ensure_ascii=False)

    def get_data_boxes(self):
        return json.loads(self.data_boxes)


class FeatureMember(SqlAlchemyBase):
    __tablename__ = "features_economy"

    member_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('members.id'), primary_key=True)
    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('members.id'), primary_key=True)

    crime_success = sqlalchemy.Column(sqlalchemy.BIGINT, default=0, nullable=False)
    crime_fail = sqlalchemy.Column(sqlalchemy.Integer, default=0, nullable=False)

    steal_success = sqlalchemy.Column(sqlalchemy.BIGINT, default=0, nullable=False)
    steal_fail = sqlalchemy.Column(sqlalchemy.Integer, default=0, nullable=False)

    casino_success = sqlalchemy.Column(sqlalchemy.BigInteger, default=0, nullable=False)

    # member = orm.relationship("Member", back_populates="feature")


class Balance(SqlAlchemyBase):
    __tablename__ = "balances_economy"

    member_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('members.id'), primary_key=True)
    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('members.guild_id'), primary_key=True)

    cash = sqlalchemy.Column(sqlalchemy.BigInteger, default=0, nullable=False)
    dep = sqlalchemy.Column(sqlalchemy.BigInteger, default=0, nullable=False)

    # member = orm.relationship("Member", back_populates="balance")

    @staticmethod
    def get(session: Session, member: discord.Member):
        return session.query(Balance).filter(Balance.member_id == member.id,
                                             Balance.guild_id == member.guild.id).first()

    def get_total(self) -> int:
        return self.cash + self.dep

    def set_cash(self, cash: int):
        self.cash = bigint(cash)

    def set_dep(self, dep: int):
        self.dep = bigint(dep)

    def add_cash(self, cash: int):
        self.set_cash(self.cash + cash)

    def add_dep(self, dep: int):
        self.set_dep(self.dep + dep)


class PromoCode(SqlAlchemyBase):
    __tablename__ = "promo_codes"
    config_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey("economy_configs.guild_id"),
                                  primary_key=True)
    code = sqlalchemy.Column(sqlalchemy.String, unique=True, primary_key=True)
    moneys = sqlalchemy.Column(sqlalchemy.BIGINT, nullable=False)
    activated = sqlalchemy.Column(sqlalchemy.Boolean, nullable=False, default=False)
    by = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('users.id'))


# –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–æ–≤–æ–º—É —Å–µ—Ä–≤–∞–∫—É
class EconomyCog(Cog, name='–≠–∫–æ–Ω–æ–º–∏–∫–∞'):
    def __init__(self, bot: Bot):
        super().__init__(bot, cls_config=EconomyConfig, emoji_icon='üíé')
        self.bot.add_models(LuckBox, FeatureMember, PromoCode, Balance)

    def get_config(self, session: db_session.Session, guild: Union[discord.Guild, int]) -> Optional[EconomyConfig]:
        return super().get_config(session, guild)

    @staticmethod
    def random(chance: float) -> bool:
        assert 0 <= chance <= 1, "–®–∞–Ω—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0; 1]"
        return (chance or -1) >= random.random()

    @commands.Cog.listener('on_ready')
    async def _listener_update_members(self):
        with db_session.create_session() as session:
            for member in self.bot.get_all_members():
                DBEconomyTools.update_features_member(session, member)
                DBEconomyTools.update_balance_member(session, member)
            session.commit()

    @commands.Cog.listener('on_guild_join')
    async def _listener_first_update_guild_on_join(self, guild: discord.Guild):
        with db_session.create_session() as session:
            for member in guild.members:
                DBEconomyTools.update_features_member(session, member)
            session.commit()

    # =======================================================================================================
    async def do_work(self, ctx: commands.Context, data: dict, chance=1., title="–†–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"):
        with db_session.create_session() as session:
            config: EconomyConfig = self.get_config(session, guild=ctx.guild)
            phrase, money, color = data[self.random(chance)]

            embed = BotEmbed(ctx=ctx,
                             title=title,
                             description=phrase + f" {'+' if money > 0 else ''}{money} {config.currency_name}",
                             colour=color
                             )

            member = DBEconomyTools.get_balance_member(session, ctx.author)
            member.add_cash(money)
            session.commit()
            await ctx.send(embed=embed)

    @commands.group('work', aliases=['—Ä–∞–±–æ—Ç–∞'])
    @commands.guild_only()
    async def _group_work(self, ctx: Context):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        await ctx.just_send_help()

    @_group_work.command('off')
    @commands.guild_only()
    @commands.cooldown(1, 1 * 60 * 60, type=commands.BucketType.user)
    async def _cmd_work_official(self, ctx: Context):
        """
        -–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ä–∏—Å–∫–æ–≤, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –∑–∞ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏.
        -–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 100 ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π  –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 2000 ; –û—Ç–¥—ã—Ö –æ—Ç —Ä–∞–±–æ—Ç—ã 6 —á–∞—Å–æ–≤
        """
        d = {
            True: (random.choice([
                "–ì—É–ª—è—è –ø–æ –ø–∞—Ä–∫—É, —Ç—ã –Ω–∞—Ç—ã–∫–∞–µ—à—å—Å—è –Ω–∞ –∫–æ—à–µ–ª—ë–∫",

                "–ü–æ–¥—Å—Ç—Ä–∏–≥–∞—è –≥–∞–∑–æ–Ω, –ø–æ–ª–∏–≤–∞—è –∫—É—Å—Ç–∏–∫–∏, —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª",

                "–ü–æ–º—ã–≤ –º–∞—à–∏–Ω—É, —Ç—ã –ø–æ–ª—É—á–∏–ª",

                "–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã—à–µ–ª –Ω–∞ –Ω–æ—á–Ω—É—é —Å–º–µ–Ω—É –≤ –∫–ª—É–±–µ, –æ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É–¥–∞—á–Ω–æ",

                "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤–ø–µ—Ä–≤—ã–µ –≤ –∂–∏–∑–Ω–∏ –ø—Ä–∏–≥–æ–¥–∏–ª–∏—Å—å",

                "–¢—ã —Å–µ–≥–æ–¥–Ω—è —Å–ª–∞–≤–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª –Ω–∞",

                "–¢–≤–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞",

                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å",

                "–ü–æ—Ä–∞–±–æ—Ç–∞–≤ –±–∞—Ä–º–µ–Ω–æ–º, —Ç—ã –ø–æ–ª—É—á–∏–ª –Ω–µ–ø–ª–æ—Ö–æ–π –æ–ø—ã—Ç"
            ]), random.randint(100, 2000), discord.colour.Color.from_rgb(0, 255, 0))
        }
        await self.do_work(ctx, d)

    @_group_work.command('slut')
    @commands.guild_only()
    @commands.cooldown(1, 1 * 60 * 60, type=commands.BucketType.user)
    async def _cmd_work_slut(self, ctx: Context):
        """
        -–†–∞–±–æ—Ç–∞, –æ—Ç—á–∞—Å—Ç–∏ —Å–≤—è–∑–∞–Ω–∞ —Å –∫—Ä–∏–º–∏–Ω–∞–ª–æ–º. –í—ã - –Ω–æ—á–Ω–∞—è –±–∞–±–æ—á–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —á—Ç–æ–±—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å
        –ª—é–¥–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ –¥–µ–Ω—å–≥–∏. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —É —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å —Å–≤–æ–∏ —Ä–∏—Å–∫–∏;

        –†–∏—Å–∫: 55%, –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥.
        -–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: -300 ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: -600
        -–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 1000 ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 3000 ; –û—Ç–¥—ã—Ö –æ—Ç —Ä–∞–±–æ—Ç—ã 12 —á–∞—Å–æ–≤
        """
        d = {
            True: (random.choice([
                "–°–µ–≥–æ–¥–Ω—è –Ω–∞—à–µ–ª—Å—è –Ω–æ–≤—ã–π –ø–∞–ø–∏–∫, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ –¥–µ–Ω—å–≥–∏",

                "–í –∂–∏–∑–Ω–∏ –Ω—É–∂–Ω—ã –∑–Ω–∞–∫–æ–º—ã–µ, —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ª—é–¥–µ–π",

                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å",

                "–¢—ã —Å—Ç–∞—â–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É —É –º–æ—Ä–æ–∂–µ–Ω—â–∏–∫–∞ "
            ]), random.randint(4000, 10000), discord.colour.Color.from_rgb(0, 255, 0)),

            False: (random.choice([
                "–°–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –ø—Ä–∏—à–ª–æ—Å—å —É–±–µ–≥–∞—Ç—å –æ—Ç –æ—Ö—Ä–∞–Ω—ã –º–µ—Å—Ç–Ω–æ–≥–æ –∫–ª—É–±–∞, –ø–æ –¥–æ—Ä–æ–≥–µ —Ç–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω —É–ø–∞–ª –≤ –≤–æ–¥—É, "
                "–ø—Ä–∏–¥–µ—Ç—Å—è —Å –Ω–∏–º —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è",

                "–í–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—á–∞–ª—Å—è –ø–æ–∂–∞—Ä –≤ –∑–¥–∞–Ω–∏–∏, "
                "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–∞–ø–∏–∫ –æ—Å—Ç–∞–≤–∏–ª —Ç–µ–±—è –±–µ–∑ –Ω–∞–ª–∏—á–Ω—ã—Ö",

                "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
            ]), -random.randint(500, 1000), discord.colour.Color.from_rgb(255, 0, 0))
        }
        await self.do_work(ctx, d, chance=0.45, title="–í—ã–ª–∞–∑–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")

    @_group_work.command('crime')
    @commands.guild_only()
    @commands.cooldown(1, 1 * 60 * 60, type=commands.BucketType.user)
    async def _cmd_work_crime(self, ctx: Context):
        """
        -–†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤—è–∑–∞–Ω–∞ —Å –∫—Ä–∏–º–∏–Ω–∞–ª–æ–º, –≤—ã –ø–æ–≥—Ä—É–∂–∞–µ—Ç–µ—Å—å –≤ –∞–∑–∞—Ä—Ç–Ω—ã–π –∏ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –º–∏—Ä,
        –≥–¥–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —à–∞–Ω—Å –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –ø–ª–æ—Ö–æ–π —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—É—à.
        –ù–∞ —Ç—ë–º–Ω—ã–µ –¥–µ–ª–∞ –≤—ã—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–º–µ–ª—ã–µ –ª—é–¥–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.
        –†–∏—Å–∫: 80%, –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥.
        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: -500 ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π -1000
        -–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 4000 ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 10000 ; –û—Ç–¥—ã—Ö –æ—Ç —Ä–∞–±–æ—Ç—ã 1 –¥–µ–Ω—å
        """

        d = {
            True: (random.choice([
                "–°–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ—è–ª–∞—Å—å —Å—Ç—Ä–µ–ª–∫–∞ –º–µ–∂–¥—É –†—É—Å—Å–∫–æ–π –ú–∞—Ñ–∏–µ–π –∏ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–π –ú–∞—Ñ–∏–µ–π\n"
                "–ò–∑ –∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –ª—é–¥–µ–π, –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –ú–∞—Ñ–∏—è —Ä–µ—à–∏–ª–∞ –Ω–∞–Ω—è—Ç—å —Ç–µ–±—è",

                "–°–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ—è–ª—Å—è –≤—ã–µ–∑–¥ –Ω–∞ –í–ó–•, –∏–∑ –∑–∞ –Ω–∞–≤–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –ø–æ–¥–º–µ–Ω–∏—Ç—å –ë–æ—Å—Å–∞ –£–∫—Ä–∞–∏–Ω—Å–∫–æ–π –ú–∞—Ñ–∏–∏",

                "–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–≤–æ—è –¥–æ–ª—è",

                "–•–æ—Ä–æ—à–∞—è —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ –≤—ã–ª–∞–∑–∫–∞! –î–µ—Ä–∂–∏",

                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å",

                "–¢—ã —Å—Ç–∞—â–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É —É –º–æ—Ä–æ–∂–µ–Ω—â–∏–∫–∞ –∏ –≤—ã—Ä—É—á–∏–ª"
            ]), random.randint(4000, 10000), discord.colour.Color.from_rgb(0, 255, 0)),

            False: (random.choice([
                "–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≥—Ä—è–∑–Ω–æ–≥–æ –¥–µ–ª–∞, —Å–∫—Ä—ã–≤ –ø–∏—Å—Ç–æ–ª–µ—Ç –∑–∞ –ø–æ—è—Å–æ–º, –≤–∞—Å –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –ú–∞—Ñ–∏—è, —Å—Ç–∞—Ä—ã–µ"
                "–∑–Ω–∞–∫–æ–º—ã–µ, –ø–æ –ø—É—Ç–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏, —á—Ç–æ –≤—Ç–æ—Ä–∞—è –º–∞—à–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–∏–¥–µ–ª –≤–∞—à –¥—Ä—É–≥ –ø–æ–µ—Ö–∞–ª–∞ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É, –Ω–∞"
                "—á—Ç–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏\n"
                "–ë–æ—Å—Å –ú–∞—Ñ–∏–∏: \"–ü—Ä–æ—Å—Ç–∏, –î–∂–æ –≤ —Å–¥–µ–ª–∫—É –Ω–µ –≤—Ö–æ–¥–∏–ª\"\n"
                "–ù–∞ –ø–æ–∏—Å–∫–∏ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–µ–º–∞–ª—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥, –Ω–æ –≤—Å–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –∑—Ä—è",

                "–ü–æ—Å–ª–µ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑–≤–æ–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—ã, –≤–∞—Å –ø–æ–≤—è–∑–∞–ª–∞ –ø–æ–ª–∏—Ü–∏—è\n"
                "–ö —Å—á–∞—Å—Ç—å—é, –≤–∞–º –ø–æ–ø–∞–ª—Å—è –ø–æ–¥–∫—É–ø–Ω–æ–π –∫–æ–ø –∏ –≤–∞–º —É–¥–∞–ª–æ—Å—å –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è",

                "–î–æ –≤–∞—Å —É–∂–µ –∫—Ç–æ —Ç–æ –æ–≥—Ä–∞–±–∏–ª!",

                "–¢–≤–æ–π —Ç–æ–≤–∞—Ä–∏—â –±—ã–ª —Ä–∞–Ω–µ–Ω –Ω–∞ –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–µ!",

                "–í–∞—Å –Ω–∞–∫—Ä—ã–ª–∏! –¢—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ç–æ —Å–±–µ–∂–∞–ª!"

            ]), -random.randint(500, 1000), discord.colour.Color.from_rgb(255, 0, 0))
        }

        await self.do_work(ctx, d, chance=0.2, title="–í—ã–ª–∞–∑–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")

    @_group_work.command('business')
    @commands.guild_only()
    @commands.cooldown(1, 12 * 60 * 60, type=BucketType.user)
    async def _cmd_work_business(self, ctx: Context):
        """
        -–†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≤—è–∑–∞–Ω–∞ —Å –ë–∏–∑–Ω–µ—Å–æ–º, –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç—å –∞–∫—Ü–∏–∏, –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–æ–≤–æ–µ,
        —Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏, –≤—Ö–æ–¥–∏—Ç—å –≤ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ. –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Å—Ç–æ–ª–∫–Ω—É—Ç—Å—è —Å
        –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞–∂–¥—ã—Ö –±–∏–∑–Ω–µ—Å–º–µ–Ω–æ–≤, —Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã.
        –†–∏—Å–∫: 80%, –≤—ã —Ä–∏—Å–∫—É–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥.
        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: -10–∫ ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π -1 –º–ª–Ω
        -–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: 10–∫ ; –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 1 –º–ª—Ä–¥ ; –û—Ç–¥—ã—Ö –æ—Ç —Ä–∞–±–æ—Ç—ã 12 —á
        """

        d = {
            False: (random.choice([
                "–¢—ã —Ä–µ—à–∏–ª –∫—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏ Tesla, –Ω–æ –æ–±–≤–∞–ª —Ä—ã–Ω–∫–∞ –ø—Ä–∏–≤–µ–ª –≤–∞—Å –∫ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤—É –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏",

                "–¢—ã —Å–æ–∑–¥–∞–ª —É–º–Ω—ã–µ –≤–µ–¥—Ä–∞ –¥–ª—è –º—É—Å–æ—Ä–∞, –Ω–æ –≤–µ–¥—Ä–∞ –Ω–∞—á–∞–ª–∏ –ª–æ–º–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –Ω–∏—Ö –≤–æ–¥—ã",

                "–¢—ã —Ä–µ—à–∏–ª —Å–æ–∑–¥–∞—Ç—å –ö–∞—Ñ–µ, –Ω–æ –∏–∑ - –∑–∞ —Ä–∞–±–æ—á–∏—Ö –æ–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ",

                "–¢—ã –Ω–∞—á–∞–ª —Å–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ —á—Ç–æ–±—ã –∏—Ö –ø—Ä–æ–¥–∞—Ç—å, –Ω–æ –æ–Ω–∏ –ø—Ä–æ–ø–∞–ª–∏"
            ]), -int(10000 + ((1000000 - 10000) * ((random.random() / 100) ** 1.8))),
                    discord.colour.Color.from_rgb(255, 0, 0)),

            True: (random.choice([
                "–¢—ã –ø—Ä–∏–¥—É–º–∞–ª –Ω–æ—Å–∫–∏ —Å GPS –∏ –∏–¥–µ—è –í—ã—Å—Ç—Ä–µ–ª–∏–ª–∞! –¢—ã—Å—è—á–∏ –º—É–∂–∏–∫–æ–≤ –∏—Ö –∫—É–ø–∏–ª–æ, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å",

                "–¢—ã –Ω–∞—á–∞–ª –º—ã—Å–ª–∏—Ç—å –º–∞—Å—à—Ç–∞–±–Ω–æ, —Å–æ–∑–¥–∞–ª –ª–∞—Ä–µ–∫ –∏ –Ω–∞—á–∞–ª —Ç–æ—Ä–≥–æ–≤–∞—Ç—å. "
                "–ê–∫—Ü–∏–∏ —Ä–æ—Å–ª–∏, –î–µ–Ω—å–≥–∏ –ø–æ—à–ª–∏ –≤–µ—Ä—Ö, —Ç—ã –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ, –ø–æ—è–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ —Ñ–∏–ª–∏–∞–ª–æ–≤"
                " –∏ —Ç—ã —Å—Ç–∞–ª —Å–∞–º—ã–º –±–æ–≥–∞—Ç—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤ —Ç–≤–æ—ë–º —Ä–æ–¥—É –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é!",

                "–¢—ã –∫—É–ø–∏–ª —Å–∞–º–æ–ª–µ—Ç –∏ –ø—Ä–æ–¥–∞–ª –µ–≥–æ –¥–æ—Ä–æ–∂–µ –ø–æ—Ç–æ–º –µ—â–µ, –ø–æ—Ç–æ–º –µ—â–µ –±–æ–ª—å—à–µ, –∏ —É —Ç–µ–±—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è",

                "–í—ã —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ —Ä–µ—à–∏–ª–∏ —Å—Ç–∞—Ç—å –±—Ä–æ–∫–µ—Ä–∞–º–∏, —Ç–æ—Ä–≥–æ–≤–∞–ª–∏ –∞–∫—Ü–∏—è–º–∏, –≤–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏ —Ä–æ—Å–ª–∏,"
                " –≤ –∏—Ç–æ–≥–µ –≤—ã –Ω–∞-–ø—Ä–æ–¥–∞–ª–∏ –∞–∫—Ü–∏–π –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —ç—Ç–æ–º"
            ]), int(10000 + ((1000000000 - 10000) * ((random.random() / 100) ** 1.8))),
                   discord.colour.Color.from_rgb(0, 255, 0))
        }

        await self.do_work(ctx, d, chance=0.2, title="–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –æ–∫–æ–Ω—á–µ–Ω–æ!")

    @commands.command('steal')
    @commands.guild_only()
    async def _cmd_steal(self, ctx: Context, member: discord.Member = None):
        """
        –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–≥—Ä–∞–±–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ —É –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.
        –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–ª —Ç–æ –≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é (0-100% –î–µ–Ω–µ–≥ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞)
        –®–∞–Ω—Å –∫—Ä–∞–∂–∏ 10%
        """
        assert ctx.author != member, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–µ–±—è –æ–±–∫—Ä–∞–¥—ã–≤–∞—Ç—å"
        with db_session.create_session() as session:
            me_data = DBEconomyTools.get_balance_member(session, ctx.author)
            op_data = DBEconomyTools.get_balance_member(session, member)
            config = self.get_config(session, ctx.guild)

            assert op_data.cash > 0, f"–£ {member.mention} –Ω–µ—Ç –¥–µ–Ω–µ–≥ –≤ –∫–æ—à–µ–ª—å–∫–µ. –ù–µ—á–µ–≥–æ –∫—Ä–∞—Å—Ç—å!"

            done, money = self.random(0.1), round(random.random() * op_data.cash)
            if done:
                embed_data = {
                    "title": random.choice(["–£—Ä—è, –£–¥–∞—á–∞!", "–•–æ—Ä–æ—à–æ —Å—Ä–∞–±–æ—Ç–∞–Ω–æ!", "–ú–æ–ª–æ–¥–µ—Ü", "–£—Å–ø–µ—Ö"]),
                    "description": random.choice([f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {HRF.number(money)} {config.currency_name}"]),
                    "colour": discord.colour.Color.from_rgb(0, 255, 0)
                }
                me_data.add_cash(money)
                op_data.add_cash(-money)
            else:
                embed_data = {
                    "title": random.choice(["–ù–µ—É–¥–∞—á–∞", "–û–±–ª–æ–º", "–ò–¥—ë–º –Ω–∞ –¥–Ω–æ", "–ü—Ä–æ–≤–∞–ª"]),
                    "description": random.choice([f"–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {HRF.number(money)} {config.currency_name}"]),
                    "colour": discord.colour.Color.from_rgb(255, 0, 0)
                }
                me_data.add_dep(-money)
                op_data.add_dep(money)

            session.commit()
            await ctx.send(embed=BotEmbed(ctx=ctx, **embed_data))

    @commands.command('casino')
    @commands.guild_only()
    async def _cmd_casino(self, ctx: Context, rate: str, money: int):
        """
        –ö–∞–∑–∏–Ω–æ, —Å—Ç–∞–≤—Ç–µ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –∏ —Å—Ç–∞–≤–∫—É. –†–∞–∑–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Å—Ç–∞–≤–∫–µ
        (—á–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∞–º –≤—ã–∏–≥—Ä—ã—à)

        –°—Ç–∞–≤–∫–∞ (rate) —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: "1–∫10" –∏–ª–∏ "2/5" –∏–ª–∏ "7:20" (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫)
        """
        assert re.match(r'\d+[–∫/:]\d+', rate), "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏"
        rate: list = list(map(int, rate.replace('–∫', '/').replace('/', ':').split(':')))
        assert all(map(lambda x: x > 0, rate)), "–ß–∏—Å–ª–∞ –≤ —Å—Ç–∞–≤–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        rate: int = rate[0] / rate[1]
        assert money > 0, "–°—É–º–º–∞ –¥–µ–Ω–µ–≥ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"
        assert rate <= 0.5, "–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 50%"

        with db_session.create_session() as session:
            member_data = DBEconomyTools.get_balance_member(session, ctx.author)
            assert member_data.cash >= money, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å—Ç–∞–≤–∏—Ç—å —Ç–µ –¥–µ–Ω—å–≥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É —Ç–µ–±—è"
            casino_data = DBEconomyTools.get_balance_member(session, ctx.guild.get_member(self.bot.user.id))
            member_data.add_cash(-money)
            if casino_data:
                casino_data.add_cash(money)

            win = self.random(rate)

            if win:
                win_money = int(money * rate ** -1)
                member_data.add_cash(win_money)
                if casino_data:
                    casino_data.add_cash(-win_money)

                config = self.get_config(session, ctx.guild)

                big_wins = [(1 / 2, 1000, "–ë–æ–ª—å—à–æ–π –∫—É—à!",
                             "https://cdn.discordapp.com/attachments/617713919464833054/831873297411080283/2Q.png"),
                            (1 / 3, 10000, "–î–µ–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å!",
                             "https://cdn.discordapp.com/attachments/617713919464833054/831873218003730462/Z.png"),
                            (1 / 4, 100000, "–ü–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ.",
                             "https://memepedia.ru/wp-content/uploads/2021/02/povezlo-povezlo-mem-5.jpg"),
                            (1 / 5, 1000000, "–ú–æ—Ä–µ –∑–æ–ª–æ—Ç–∞!",
                             "https://klike.net/uploads/posts/2018-10/1539761596_1.jpg"),
                            (1 / 10, 10000000, "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–π!",
                             "https://cdn.discordapp.com/attachments/617713919464833054/831873183110922250/"
                             "Desktop_210414_1846.jpg")][::-1]
                embed = None
                for chance, sum_money, name, image_url in big_wins:
                    if rate <= chance and win_money >= sum_money:
                        embed = BotEmbed(ctx=ctx,
                                         description=f'–¢—ã –ø–æ–ª—É—á–∏–ª {name} {win_money} {config.currency_icon} '
                                                     f'(+ {win_money - money})',
                                         colour=discord.Colour.from_rgb(0, 250, 0))
                        embed.set_image(url=image_url)
                        break

                if not embed:
                    embed = BotEmbed(ctx=ctx,
                                     title=random.choice(['–£—Ä–∞, —É–¥–∞—á–∞!', '–¢—ã –ø–æ–±–µ–¥–∏–ª!', '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ —É—Å–ø–µ—à–Ω–æ!']),
                                     description=f'–¢—ã –ø–æ–ª—É—á–∞–µ—à—å {win_money} '
                                                 f'{config.currency_name} (+ {win_money - money})',
                                     colour=discord.Colour.from_rgb(0, 200, 0))
            else:
                embed = BotEmbed(ctx=ctx,
                                 title=random.choice(['–ü–æ–Ω–∏–º–∞—é', '–ü–æ–≤–µ–∑—ë—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑...', '–ù–µ—É–¥–∞—á–∞', 'Fail']),
                                 description=f"—Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª ({-money})",
                                 colour=discord.Colour.from_rgb(255, 0, 0))
            session.commit()

        await ctx.reply(embed=embed)

    # =======================================================================================================
    @staticmethod
    def get_chance_steal_bank(total: int, count: int) -> float:
        if count == 0 or total <= 0 or total / count <= 1:
            return 0
        return math.log10(total / count) ** -1

    @commands.group('bank')
    @commands.guild_only()
    async def _group_bank(self, ctx: Context):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ.
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            balances = map(lambda m: DBEconomyTools.get_balance_member(session, m).dep, ctx.guild.members)
            balances = list(filter(lambda x: x > 0, balances))
            total = sum(balances)
            count = len(balances)

            embed = BotEmbed(ctx=ctx, title="–î–∞–Ω–Ω—ã–µ –æ –±–∞–Ω–∫–µ")
            embed.add_field(name="–í—Å–µ–≥–æ –≤ –±–∞–Ω–∫–µ", value=f'{HRF.number(total)} {config.currency_icon}')
            embed.add_field(name='–ù–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫', value=str(count))
            embed.add_field(name='–í —Å—Ä–µ–¥–Ω–µ–º',
                            value=f'{HRF.number(round(total / count)) if count > 0 else 0} '
                                  f'{config.currency_icon}')
            embed.add_field(name='–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞',
                            value=str(round(math.log10((total or 2) / (count or 1)) ** -1 * 100, 2)) + "%")
            await ctx.send(embed=embed)

    @_group_bank.command('rob')
    @commands.guild_only()
    @commands.is_owner()
    async def _cmd_bank_rob(self, ctx: Context, count: int):
        """
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫ –æ–≥—Ä–∞–±–∏–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —è—á–µ–µ–∫ (—á–µ–º –±–æ–ª—å—à–µ —è—á–µ–µ–∫ —Ç–µ–º –º–µ–Ω—å—à–µ —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö).
        –ß–µ–º –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–µ–Ω–µ–≥ –≤ –Ω–µ–ø—É—Å—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è.
        –ï—Å–ª–∏ –Ω–µ —É–¥–∞—á–∞ —Ç–æ –≤—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –¥–æ–ª–≥ –±–∞–Ω–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ 1% –æ—Ç –≤—Å–µ–π —Å—É–º–º—ã –≤ –±–∞–Ω–∫–µ.
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ –∏–º–µ—Ç—å –¥–æ–ª–≥–æ–≤ –≤ –±–∞–Ω–∫–µ!

        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            balances = map(lambda m: DBEconomyTools.get_balance_member(session, m).dep, ctx.guild.members)
            balances = list(filter(lambda x: x > 0, balances))
            total_dep = sum(balances)
            count_dep = len(balances)
            assert count <= count_dep, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —è—á–µ–µ–∫!"
            chance = (1 - (count - 1) / count_dep) * self.get_chance_steal_bank(total_dep, count_dep)
            success = (chance or -1) >= random.random()
            member = DBEconomyTools.get_balance_member(session, ctx.author)
            if success:
                member.add_cash(1000)
                embed = BotEmbed(ctx=ctx,
                                 title="–£—Å–ø–µ—Ö",
                                 description=f"–¢—ã –º–æ–ª–æ–¥–µ—Ü. –°–∫–æ–ª—å–∫–æ-—Ç–æ –Ω–∞–≥—Ä–∞–±–∏–ª, –Ω–æ –Ω–µ—á–∞—è–Ω–Ω–æ –ø–æ—Å–µ—è–ª –≤—Å—ë –Ω–∞ —É–ª–∏—Ü–µ. "
                                             f"–ñ–¥–∏ –æ–±–Ω–æ–≤—ã, –Ω–æ –ø–æ–∫–∞ –¥–µ—Ä–∂–∏ 1000 {config.currency_icon}!",
                                 colour=discord.Colour.from_rgb(0, 255, 0)
                                 )
            else:

                member.set_dep(int(- total_dep * 0.1))

                embed = BotEmbed(ctx=ctx,
                                 title="–ü—Ä–æ–≤–∞–ª",
                                 description=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–≥—Ä–∞–±–∏—Ç—å –±–∞–Ω–∫.\n"
                                             f"–í—ã —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å: {member.dep} {config.currency_icon}",
                                 colour=discord.Colour.from_rgb(255, 0, 0)
                                 )
            session.commit()
            await ctx.reply(embed=embed)

    # =======================================================================================================
    async def change_bal(self, ctx: Context, member: discord.Member, value: int, a: int, where) -> BotEmbed:
        assert value >= 0, "Value –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0"
        assert where in ["dep", "cash"], "where –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 'dep' –∏ 'cash'"
        with db_session.create_session() as session:
            a //= abs(a)

            config = self.get_config(session, member.guild)
            member_data = DBEconomyTools.get_balance_member(session, member)

            embed = BotEmbed(ctx=ctx,
                             title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                             description=f"{'–ó–∞—á–∏—Å–ª–µ–Ω–æ' if a > 0 else '–°–Ω—è—Ç–æ'} "
                                         f"{HRF.number(value)} {config.currency_name}"
                             )
            embed.set_author(name=member.display_name, icon_url=member.avatar_url)
            embed.add_field(name="–ë—ã–ª–æ", value=f"{HRF.number(member_data.get_total())} "
                                               f"{config.currency_icon}")
            if where == 'dep':
                member_data.add_dep(value * a)
            else:
                member_data.add_cash(value * a)

            embed.add_field(name="–°—Ç–∞–ª–æ",
                            value=f"{HRF.number(member_data.get_total())} {config.currency_icon}")
            session.commit()
            return embed

    @commands.group('bal')
    @commands.guild_only()
    async def _group_balance(self, ctx: Context, member: discord.Member = None):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π –±–∞–ª–∞–Ω—Å (—É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω member)
        """

        with db_session.create_session() as session:
            member = ctx.author if member is None else member
            data = DBEconomyTools.get_balance_member(session, member)
            config = self.get_config(session, ctx.guild)

            embed = BotEmbed(ctx=ctx, title=f"–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", description=f"–°—á—ë—Ç {member.mention}")
            embed.set_thumbnail(url=member.avatar_url)
            embed.add_field(name="–ö–æ—à–µ–ª—ë–∫", value=f"{HRF.number(data.cash)} {config.currency_icon}")
            embed.add_field(name="–ë–∞–Ω–∫", value=f"{HRF.number(data.dep)} {config.currency_icon}")
            embed.add_field(name="–í—Å–µ–≥–æ", value=f"{HRF.number(data.get_total())} {config.currency_icon}")
            await ctx.send(embed=embed)

    # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—á—ë—Ç–æ–º
    @_group_balance.command('dep')
    @commands.guild_only()
    async def _cmd_bal_dep(self, ctx: Context, value: int = None):
        """
        –ö–ª–∞–¥—ë—Ç –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫ (–ï—Å–ª–∏ value –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –≤—Å—è —Å—É–º–º–∞)
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            me_data = DBEconomyTools.get_balance_member(session, ctx.author)

            if value is None:
                value = me_data.cash
                assert value > 0, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö"
            else:
                assert value > 0, "value –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"

            assert value <= me_data.cash, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤–∑–Ω–æ—Å–∞"

            me_data.add_cash(-value)
            me_data.add_dep(value)

            embed = BotEmbed(ctx=ctx,
                             title="–ü–µ—Ä–µ–≤–æ–¥",
                             description=f"–í –±–∞–Ω–∫ –∑–∞—á–∏—Å–ª–µ–Ω–æ {HRF.number(value)} {config.currency_name}"
                             )
            embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar_url)
            embed.add_field(name="–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–ª–∏—á–∫–∏",
                            value=f"{HRF.number(me_data.cash)} {config.currency_icon}")
            session.commit()
            await ctx.send(embed=embed)

    @_group_balance.command('cash')
    @commands.guild_only()
    async def _cmd_bal_cash(self, ctx: Context, value: int = None):
        """
        –°–Ω–∏–º–∞–µ—Ç –¥–µ–Ω—å–≥–∏ —Å –±–∞–Ω–∫–∞ (–ï—Å–ª–∏ value –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–æ –≤—Å—è —Å—É–º–º–∞)
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            me_data = DBEconomyTools.get_balance_member(session, ctx.author)

            if value is None:
                value = me_data.dep
                assert value > 0, "–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ"
            else:
                assert value > 0, "value –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0"

            assert value <= me_data.dep, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–Ω—è—Ç–∏—è"

            me_data.add_dep(-value)
            me_data.add_cash(value)

            embed = BotEmbed(ctx=ctx,
                             title="–ü–µ—Ä–µ–≤–æ–¥",
                             description=f"–í –±–∞–Ω–∫–µ —Å–Ω—è—Ç–æ {HRF.number(value)} {config.currency_name}"
                             )
            embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar_url)
            embed.add_field(name="–û—Å—Ç–∞–ª–æ—Å—å –≤ –±–∞–Ω–∫–µ",
                            value=f"{HRF.number(me_data.dep)} {config.currency_icon}")
            session.commit()
        await ctx.send(embed=embed)

    @_group_balance.command('add')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_bal_add(self, ctx: Context, member: discord.Member, value: int, where: str = None):
        """
        –ö–ª–∞–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á—ë—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ dep)
        """
        await ctx.send(embed=await self.change_bal(ctx, member, value, 1, where or "dep"))

    @_group_balance.command('remove')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_bal_remove(self, ctx: Context, member: discord.Member, value: int, where: str = None):
        """
        –°–Ω–∏–º–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ —Å–æ —Å—á—ë—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ dep)
        """
        await ctx.send(embed=await self.change_bal(ctx, member, value, -1, where or "dep"))

    @_group_balance.command('set')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_bal_set(self, ctx: Context, member: discord.Member, value: int, where: str = None):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ dep)
        """
        where = where or "dep"
        assert where in ["dep", "cash"], "where –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ 'dep' –∏ 'cash'"
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            member_data = DBEconomyTools.get_balance_member(session, member)

            if where == 'dep':
                member_data.set_dep(value)
            else:
                member_data.set_cash(value)
            embed = BotEmbed(ctx=ctx,
                             title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                             description=f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –≤ {where} "
                                         f"{HRF.number(member_data.cash if where == 'cash' else member_data.dep)} "
                                         f"{config.currency_name}"
                             )
            embed.set_author(name=member.display_name, icon_url=member.avatar_url)
            session.commit()
            await ctx.send(embed=embed)

    @_group_balance.command('visa')
    @commands.guild_only()
    async def _cmd_bal_visa(self, ctx: Context, member: discord.Member, value: int):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ –±–∞–Ω–∫ —Å –∫–æ–º–∏—Å—Å–∏–µ–π –≤ 5%
        """
        assert value > 0, "–°—É–º–º–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"

        with db_session.create_session() as session:
            member_a = DBEconomyTools.get_balance_member(session, ctx.author)
            member_b = DBEconomyTools.get_balance_member(session, member)
            bank = DBEconomyTools.get_balance_member(session, ctx.me)
            config = self.get_config(session, ctx.guild)

            assert member_a.dep >= value, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"
            commission = int(value * 0.02)
            member_a.add_dep(-value)
            member_b.add_dep(value - commission)
            bank.add_cash(commission)
            session.commit()

            embed = BotEmbed(ctx=ctx, title="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥",
                             timestamp=datetime.datetime.now())
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=ctx.author.mention)
            embed.add_field(name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=member.mention)
            embed.add_field(name="–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ", value=str(HRF.number(value)) + " " + config.currency_icon,
                            inline=False)
            embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è", value=str(HRF.number(commission)) + " " + config.currency_icon,
                            inline=False)
            embed.add_field(name="–ò—Ç–æ–≥–æ",
                            value=str(HRF.number(value - commission)) + " " + config.currency_icon,
                            inline=False)
            await ctx.reply(embed=embed)

    @commands.Cog.listener('on_member_join')
    async def _listener_auto_add_member_data(self, member: discord.Member):
        with db_session.create_session() as session:
            DBEconomyTools.update_balance_member(session, member)
            DBEconomyTools.update_features_member(session, member)
            session.commit()

    @commands.Cog.listener('on_member_remove')
    async def _listener_auto_remove_member_data(self, member: discord.Member):
        with db_session.create_session() as session:
            if DBEconomyTools.get_balance_member(session, member):
                DBEconomyTools.delete_balance_member(session, member)
                DBEconomyTools.delete_features_member(session, member)
                session.commit()

    # =======================================================================================================
    @commands.command()
    @commands.guild_only()
    async def leader_board(self, ctx: Context):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–ø –±–æ–≥–∞—á–∞–º–∏
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            members = list(
                sorted(filter(lambda x: bool(x[0]),
                              map(lambda m: (m, DBEconomyTools.get_balance_member(session, m).get_total()),
                                  ctx.guild.members)),
                       key=lambda m: (m[1], m[0].name), reverse=True)
            )

            embed = BotEmbed(ctx=ctx,
                             title="–°–∞–º—ã–µ –±–æ–≥–∞—Ç—ã–µ –ª—é–¥–∏",
                             description="\n".join(
                                 f"{i + 1}. {member.mention} : {HRF.number(money)} {config.currency_icon}"
                                 for i, (member, money) in enumerate(members[:10]))
                             )
            embed.set_author(name=str(ctx.guild), icon_url=ctx.guild.icon_url)

            for i in range(len(members)):
                if members[i][0] == ctx.author:
                    embed.set_footer(text=f"–í–∞—à–µ –º–µ—Å—Ç–æ {i + 1}-–µ", icon_url=ctx.author.avatar_url)
                    break
            await ctx.reply(embed=embed)

    @commands.command()
    @commands.guild_only()
    async def poor_board(self, ctx: Context):
        """
        –í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–ø –±–µ–¥–Ω—è–∫–∞–º–∏
        """

        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            members = list(
                sorted(filter(lambda x: bool(x[0]),
                              map(lambda m: (m, DBEconomyTools.get_balance_member(session, m).get_total()),
                                  ctx.guild.members)),
                       key=lambda m: (m[1], m[0].name), reverse=False)
            )

            embed = BotEmbed(ctx=ctx,
                             title="–°–∞–º—ã–µ –±–µ–¥–Ω—ã–µ –ª—é–¥–∏",
                             description="\n".join(
                                 f"{i + 1}. {member.mention} : {HRF.number(money)} {config.currency_icon}"
                                 for i, (member, money) in enumerate(members[:10]))
                             ).set_author(name=str(ctx.guild), icon_url=ctx.guild.icon_url)

            for i in range(len(members)):
                if members[i][0] == ctx.author:
                    embed.set_footer(text=f"–í–∞—à–µ –º–µ—Å—Ç–æ {i + 1}-–µ", icon_url=ctx.author.avatar_url)
                    break

            await ctx.send(embed=embed)

    # =======================================================================================================
    @commands.group('shop')
    @commands.guild_only()
    async def _group_shop(self, ctx: Context, page=1):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞ (Page - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞)
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)

            items = config.get_shop(ctx)['shop']  # , [{"role": 733753399102668831, "price": 10000000}])

            max_items_on_page = 5
            max_page = len(items) // max_items_on_page + (1 if len(items) % max_items_on_page else 0)
            assert max_page >= page >= 1, "–ù–µ—Ç —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"

            embed = BotEmbed(ctx=ctx,
                             title=f"–ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä–∞",
                             description=f"–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{ctx.prefix}buy`\n"
                                         f"–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
                                         f"`{ctx.prefix}shop page`\n"
                                         f"–≥–¥–µ `page` - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                             )
            embed.set_author(name=str(ctx.guild), icon_url=ctx.guild.icon_url)
            embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max_page}")
            try:
                for i in range(max_items_on_page):
                    item = items[i + (page - 1) * max_items_on_page]
                    name = (
                            f"{i + (page - 1) * max_items_on_page + 1} - "
                            + item['role'].name +
                            f" {HRF.number(item['price'])} {config.currency_icon}"
                    )
                    embed.add_field(name=name, value=item.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'), inline=False)
            except IndexError:
                pass
            await ctx.send(embed=embed)

    @_group_shop.command(name='buy')
    @commands.guild_only()
    async def _cmd_shop_buy(self, ctx: Context, item_id: int):
        """
        –ü–æ–∫—É–ø–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id
        """

        assert item_id >= 1, "item_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1"

        with db_session.create_session() as session:
            config = self.get_config(session, guild=ctx.guild)

            try:
                item = config.get_shop(ctx)['shop'][item_id - 1]
            except (IndexError, KeyError):
                assert False, f"–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å id {item_id}"
            else:
                role = item['role']
                price = item['price']
                member_data = DBEconomyTools.get_balance_member(session, ctx.author)
                assert member_data.cash >= price, "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞–ª–∏—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
                await ctx.author.add_roles(role)
                member_data.add_cash(-price)
                session.commit()
                session.close()
                await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ!", description="–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                                              colour=discord.colour.Color.from_rgb(0, 255, 0)))

    @_group_shop.command(name='add')
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True)
    async def _cmd_shop_add(self, ctx: Context, role: discord.Role, price: int, *description):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω
        """

        assert price >= 1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 1"

        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            items = config.get_shop(ctx)['shop']
            items.append(
                {"role": role, "price": price, "description": join_string(description, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")})
            config.set_shop({'shop': items})
            session.commit()
            await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ!", description="–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω",
                                          colour=discord.colour.Color.from_rgb(0, 255, 0)))

    @_group_shop.command(name='remove')
    @commands.guild_only()
    @commands.has_permissions(manage_roles=True)
    @commands.bot_has_permissions(manage_roles=True)
    async def _cmd_shop_remove(self, ctx: Context, item_id: int):
        """
        –£–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
        """

        assert item_id >= 1, "item_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1"
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            shop = config.get_shop(ctx)
            try:
                item = shop['shop'].pop(item_id - 1)
                config.set_shop(shop)
                session.commit()
                session.close()
            except (IndexError, KeyError):
                assert False, f"–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ —Å id {item_id}"
            else:
                await ctx.send(embed=BotEmbed(ctx=ctx, title="–£—Å–ø–µ—à–Ω–æ!", description=f"–ü—Ä–µ–¥–º–µ—Ç {item['role']} —É–±—Ä–∞–Ω "
                                                                                     f"–∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                                              colour=discord.colour.Color.from_rgb(0, 255, 0)))

    # =======================================================================================================
    @commands.command()
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def set_currency(self, ctx: Context, icon: str, name: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–æ–¥–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            config.currency_icon = icon
            config.currency_name = name
            session.commit()
            await ctx.send(
                embed=BotEmbed(ctx=ctx, title="–ò–∑–º–µ–Ω–µ–Ω–∞ –≤–∞–ª—é—Ç–∞", description=f"–ò–∑–º–µ–Ω–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ –Ω–∞ {icon} {name}"))

    # =======================================================================================================
    @commands.group('luck_box')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _group_luck_box(self, ctx: Context):
        """–ö–æ—Ä–æ–±–∫–∏ —É–¥–∞—á–∏"""
        # TODO: –ó–∞–≥–ª—É—à–∫–∞
        await ctx.just_send_help()

    @_group_luck_box.command('set')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_luck_box_set(self, ctx: Context, name: str, desc: str, prices: str, image: str, *lots: str):
        class Lot:
            def __init__(self, data):
                _name, _role_id, _chance = data.split(';')
                self.name = _name
                self.role: discord.Role = ctx.guild.get_role(int(_role_id))
                self.chance = float(_chance)

        lots = list(map(Lot, lots))

        with db_session.create_session() as session:
            session: db_session.Session

            config: EconomyConfig = self.get_config(session, ctx.guild)

            f = "{}: {} " + config.currency_icon
            embed = BotEmbed(ctx=ctx, title=name, description=desc + "\n–¶–µ–Ω—ã –∑–∞ –∫–æ—Ä–æ–±–∫–∏\n" + "\n".join(
                f.format(i + 1, p) for i, p in enumerate(list(map(int, prices.split(" "))))))
            embed.set_thumbnail(url=image)
            embed.set_author(name=name, icon_url=ctx.guild.icon_url)
            for i, lot in enumerate(lots):
                embed.add_field(name=f"#{i + 1}: {lot.name}", value=lot.role.mention, inline=i != 0)

            msg: discord.Message = await ctx.send(embed=embed)
            # TODO: –¶–µ–Ω—ã –Ω–∞ –∫–æ—Ä–æ–±–∫–∏

            data_box = {
                "lots": [{"name": lot.name, "role_id": lot.role.id, "chance": lot.chance} for lot in lots],
                "prices": list(map(int, prices.split(" ")))
            }
            for i in range(5):
                await msg.add_reaction(EMOJI_NUMBERS[i + 1])

            box = LuckBox()
            box.config_id = self.get_config(session, ctx.guild).guild_id
            box.ctrl_msg = msg.id
            box.set_data_boxes(data_box)
            session.add(box)

            session.commit()
            await ctx.message.delete()

    @commands.Cog.listener('on_raw_reaction_add')
    async def _listener_buy_luck_box(self, payload: discord.RawReactionActionEvent):
        if payload.emoji.name not in EMOJI_NUMBERS.values():
            return
        if payload.member == self.bot.user:
            return

        with db_session.create_session() as session:
            session: db_session.Session

            luck_box: LuckBox = session.query(LuckBox).filter(LuckBox.ctrl_msg == payload.message_id).first()
            if not luck_box:
                return

            data = luck_box.get_data_boxes()
            lots = data["lots"]
            prices = data["prices"]

            count = None
            for key, val in EMOJI_NUMBERS.items():
                if val == payload.emoji.name:
                    count = key
            if count is None:
                return

            member = payload.member
            member_data = DBEconomyTools.get_balance_member(session, member)

            price = sum(prices[:count])
            channel: discord.TextChannel = self.bot.get_channel(831087870843682846)
            if member_data.cash < price:
                await channel.send(
                    embed=BotEmbed(
                        title="–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
                        description=f"{member.mention} –£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ "
                                    f"—Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ä–æ–±–æ–∫. ({self.bot.command_prefix}bal)"),
                    delete_after=10)
            else:
                member_data.add_cash(- price)
                session.commit()

                async with channel.typing():

                    prizes = list()
                    while len(prizes) < count:
                        for lot in lots:
                            if lot['chance'] >= random.random():
                                prizes.append(lot)
                                break

                    embed = BotEmbed(title="–¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à", description=f"{member.mention} —Ç–≤–æ–∏ –ø—Ä–∏–∑—ã —É–∂–µ —É —Ç–µ–±—è!")
                    for i, lot in enumerate(prizes):
                        embed.add_field(name=f"#{i + 1}: {lot['name']}",
                                        value=channel.guild.get_role(lot['role_id']).mention, inline=False)
                roles = list(map(lambda x: channel.guild.get_role(x['role_id']), prizes))
                await member.add_roles(*roles)

                # TODO: –°–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
                await channel.send(embed=embed)

    @commands.Cog.listener('on_raw_message_delete')
    async def _listener_delete_luck_box(self, payload: discord.RawMessageDeleteEvent):
        with db_session.create_session() as session:
            box = session.query(LuckBox).filter(LuckBox.ctrl_msg == payload.message_id).first()
            if box:
                session.delete(box)
                session.commit()

    # =======================================================================================================
    @commands.group('promo')
    @commands.guild_only()
    async def _group_promo(self, ctx: Context, code: str):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)

            code = session.query(PromoCode).filter(PromoCode.code == code,
                                                   PromoCode.config_id == config.guild_id).first()
            assert isinstance(code, PromoCode), "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥"
            assert not code.activated, "–ö–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

            balance = DBEconomyTools.get_balance_member(session, ctx.author)
            balance.add_dep(code.moneys)
            code.activated = True
            code.by = ctx.author.id
            session.commit()

            await ctx.reply(embed=BotEmbed(ctx=ctx, title="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥").add_field(
                name="–ù–∞—á–∏—Å–ª–µ–Ω–æ", value=HRF.number(code.moneys) + " " + config.currency_icon))

    @_group_promo.command('create')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_promo_create(self, ctx: Context, moneys: int):
        """
        –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            code = PromoCode()
            code.config_id = config.guild_id
            code.code = "".join(chr(random.randint(ord("A"), ord("Z"))) for _ in range(10))
            code.moneys = bigint(moneys)
            session.add(code)
            session.commit()
            await ctx.send(embed=BotEmbed(ctx=ctx, title="–ü—Ä–æ–º–æ–∫–æ–¥").add_field(
                name="–ö–æ–¥", value=f"`{code.code}`").add_field(
                name="–°—É–º–º–∞", value=HRF.number(code.moneys) + ' ' + config.currency_icon
            ))

    @_group_promo.command('list')
    @commands.guild_only()
    @commands.has_permissions(administrator=True)
    async def _cmd_promo_list(self, ctx: Context):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–µ—Ä–≤–µ—Ä–∞
        """

        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            codes = session.query(PromoCode).filter(PromoCode.config_id == config.guild_id,
                                                    PromoCode.activated == False).all()
            await ctx.send(embed=BotEmbed(ctx=ctx,
                                          title=f"–ü—Ä–æ–º–æ–∫–æ–¥—ã {ctx.guild.name}",
                                          description="\n".join(
                                              f"`{code.code}` - {HRF.number(code.moneys)} {config.currency_icon}"
                                              for code in codes)))

    # =======================================================================================================
    @commands.command('help_economy')
    @commands.guild_only()
    async def _cmd_help_economy(self, ctx: Context):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)

            embed = BotEmbed(ctx=ctx, )
            embed.title = "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ \"–ì.–†.–ò.–ë\""
            embed.description = (
                "```python\n"
                "   –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–º –≥–æ—Ä–æ–¥–µ, –≤–æ–∫—Ä—É–≥ –≤–æ—Ä–æ–≤—Å—Ç–≤–æ, –æ–±–º–∞–Ω, –Ω–∞—Å–∏–ª–∏–µ. "

                "–ù–∏–∫–æ–º—É –Ω–µ–ª—å–∑—è –¥–æ–≤–µ—Ä—è—Ç—å, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–±—è.\n"
                "–†–∞–±–æ—Ç–∞–π, –≤–æ—Ä—É–π, –≥—Ä–∞–±—å –±–∞–Ω–∫–∏, –¥–µ–ª–∞–π –≤—Å–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–∞–≤—É. "
                "–≠—Ç–æ–º—É –≥–æ—Ä–æ–¥—É –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –ª–µ–≥–µ–Ω–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—É–¥–µ—à—å —Ç—ã!\n\n"
                f"–ì–æ—Ä–æ–¥: {ctx.guild.name}\n"
                f"–í–∞–ª—é—Ç–∞ –≥–æ—Ä–æ–¥–∞: {config.currency_name}\n\n"
                f"–ú—ç—Ä - {ctx.guild.owner.display_name}\n"
                "–í–∞—à–∞ —Ä–æ–ª—å - –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω```"
            )
            embed.add_field(name=ctx.prefix + self.bot.get_command('work').name,
                            value="–£–∑–Ω–∞—Ç—å –æ —Å–ø–æ—Å–æ–±–∞—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
            await ctx.send(embed=embed)


class DBEconomyTools:
    @staticmethod
    def get_features_member(session: db_session.Session, member: discord.Member) -> Optional[FeatureMember]:
        return session.query(FeatureMember).filter(FeatureMember.member_id == member.id,
                                                   FeatureMember.guild_id == member.guild.id).first()

    @staticmethod
    def add_features_member(session: db_session.Session, member: discord.Member) -> FeatureMember:
        if DBEconomyTools.get_features_member(session, member):
            raise ValueError("–¢–∞–∫–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å")

        fm = FeatureMember()
        fm.member_id = member.id
        fm.guild_id = member.guild.id
        session.add(fm)
        return fm

    @staticmethod
    def update_features_member(session: db_session.Session, member: discord.Member) -> FeatureMember:
        fm = DBEconomyTools.get_features_member(session, member)
        if not fm:
            fm = DBEconomyTools.add_features_member(session, member)
        else:
            fm.member_id = member.id
            fm.guild_id = member.guild.id
        return fm

    @staticmethod
    def delete_features_member(session: db_session.Session, member: discord.Member):
        fm = DBEconomyTools.get_features_member(session, member)
        if not fm:
            raise ValueError("–¢–∞–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        session.delete(fm)
        return fm

    @staticmethod
    def get_balance_member(session: db_session.Session, member: discord.Member) -> Optional[Balance]:
        return session.query(Balance).filter(Balance.member_id == member.id,
                                             Balance.guild_id == member.guild.id).first()

    @staticmethod
    def add_balance_member(session: db_session.Session, member: discord.Member):
        if DBEconomyTools.get_balance_member(session, member):
            raise ValueError("–¢–∞–∫–æ–π —Å—á—ë—Ç —É–∂–µ –µ—Å—Ç—å")

        bal = Balance()
        bal.member_id = member.id
        bal.guild_id = member.guild.id
        session.add(bal)
        return bal

    @staticmethod
    def update_balance_member(session: db_session.Session, member: discord.Member) -> Balance:
        bal = DBEconomyTools.get_balance_member(session, member)
        if not bal:
            bal = DBEconomyTools.add_balance_member(session, member)
        else:
            bal.member_id = member.id
            bal.guild_id = member.guild.id
        return bal

    @staticmethod
    def delete_balance_member(session: db_session.Session, member: discord.Member):
        bal = DBEconomyTools.get_balance_member(session, member)
        if not bal:
            raise ValueError("–¢–∞–∫–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        session.delete(bal)
        return bal


async def setup(bot: Bot):
    await bot.add_cog(EconomyCog(bot))
