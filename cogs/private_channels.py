from typing import Optional, List
from typing import Union

import discord
import sqlalchemy
from discord.ext import commands

import db_session
from PLyBot import Bot, get_any
from PLyBot import Cog
from db_session import SqlAlchemyBase, BaseConfigMix, NONE, MIN_DATETIME


class PrivateChannelsConfig(SqlAlchemyBase, BaseConfigMix):
    __tablename__ = "private_channels_configs"

    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('guilds.id'),
                                 primary_key=True, nullable=False)
    channels = sqlalchemy.Column(sqlalchemy.String, nullable=True)
    access = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{}')
    active_until = sqlalchemy.Column(sqlalchemy.Date, nullable=True, default=MIN_DATETIME)

    def set_channels(self, *channels: discord.VoiceChannel):
        for channel in channels:
            if not isinstance(channel, discord.VoiceChannel):
                raise ValueError(f"–£–∫–∞–∑—ã–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª –Ω–µ VoiceChannel (got type '{type(channel)}')")

        if not channels:
            self.channels = None
        else:
            self.channels = ";".join(str(channel.id) for channel in channels)

    def get_channels(self, bot: Bot) -> List[discord.VoiceChannel]:
        if self.channels != NONE and self.channels:
            channels = self.channels
            ids = map(int, str(channels).split(';'))
            return list(filter(bool, map(bot.get_channel, ids)))
        return []


class PrivateChannelsCog(Cog, name="–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"):
    """
    –ú–æ–¥—É–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –° –Ω–∏–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –±–µ–∑ —Ç—Ä—É–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª—ã –∏
    —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è. (!!—Ö–µ–ª–ø set_pcc)

    –†–∞–±–æ—Ç–∞ –∏—Ö –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞. –í—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —É–∫–∞–∑–∞–Ω —á—É—Ç—å —Ä–∞–Ω–Ω–µ–µ, –æ–Ω —Å–æ–∑–¥–∞—ë—Ç –≤–∞—à—É
    –ª–∏—á–Ω—É—é –±–µ—Ä–ª–æ–≥—É –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–∞—Å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–∞–º –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ–Ω –æ—á–∏—Å—Ç–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–æ–º.
    **–í–Ω–∏–º–∞–Ω–∏–µ** —Å–ª–µ–¥—É–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–ò–Ω–∞—á–µ –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤
    –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±—É–¥—É—Ç –æ—á–∏—â–∞—Ç—å—Å—è)
    """

    def __init__(self, bot: Bot):
        super().__init__(bot, cls_config=PrivateChannelsConfig)

    def get_config(self, session: db_session.Session,
                   guild: Union[discord.Guild, int]) -> Optional[PrivateChannelsConfig]:
        return super().get_config(session, guild)

    @commands.command(name='–ø—Ä–∏–≤–∫–∞–Ω–∞–ª', aliases=['set_pcc', 'private_channel'])
    @commands.guild_only()
    async def set_private_channel_creator(self, ctx: commands.Context, *channels: discord.VoiceChannel):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ –∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.
        """
        with db_session.create_session() as session:
            config = self.get_config(session, ctx.guild)
            config.set_channels(*channels)
            session.commit()
        chls_str = ", ".join(str(channel) for channel in channels)

        embed = discord.Embed(
            title="–£—Å–ø–µ—à–Ω–æ!",
            colour=self.bot.colour_embeds,
            description=f'–ö–∞–Ω–∞–ª—ã "{chls_str}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤'
        )

        await ctx.send(embed=embed)

    @commands.Cog.listener('on_voice_state_update')
    async def handle_private_channels(self, member: discord.Member, _, after: discord.VoiceClient):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        """
        if not self.bot.is_ready():
            return
        with db_session.create_session() as session:
            config = self.get_config(session, member.guild)
            channels_add = config.get_channels(self.bot)
            if not channels_add:
                return
            if not config.check_active_until():
                return
            categories = [channel.category for channel in channels_add]
            if after.channel in channels_add:
                name = get_any(member.activities, lambda x: isinstance(x, discord.Game)) or member.display_name
                channel = await after.channel.category.create_voice_channel(name=f"üîª {name}", user_limit=5)
                try:
                    await channel.set_permissions(member, manage_roles=True,
                                                  manage_channels=True, mute_members=True,
                                                  deafen_members=True, move_members=True)
                    await member.move_to(channel)
                except (discord.errors.HTTPException, discord.errors.NotFound):
                    pass
            elif categories is not None:
                for category in categories:
                    for channel in category.voice_channels:
                        if not channel.members and channel not in channels_add:
                            try:
                                await channel.delete()
                            except discord.errors.NotFound:
                                pass


def setup(bot: Bot):
    bot.add_cog(PrivateChannelsCog(bot))
