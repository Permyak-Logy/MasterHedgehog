import random

import sqlalchemy
from discord.ext import commands

from PLyBot import Bot, Cog, BotEmbed
from PLyBot.const import EMOJI_NUMBERS
from db_session import SqlAlchemyBase, BaseConfigMix, MIN_DATETIME


class RandomConfig(SqlAlchemyBase, BaseConfigMix):
    __tablename__ = "random_configs"

    guild_id = sqlalchemy.Column(sqlalchemy.Integer, sqlalchemy.ForeignKey('guilds.id'),
                                 primary_key=True, nullable=False)
    access = sqlalchemy.Column(sqlalchemy.String, nullable=False, default='{}')
    active_until = sqlalchemy.Column(sqlalchemy.Date, nullable=True, default=None)


class RandomCog(Cog, name='–°–ª—É—á–∞–π–Ω–æ—Å—Ç–∏'):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π!
    """

    def __init__(self, bot: Bot):
        super().__init__(bot, cls_config=RandomConfig, emoji_icon='üé±')

    @commands.group('random', aliases=['rand'])
    async def _group_random(self, ctx: commands.Context):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.0:1.0]
        """

        await ctx.reply(str(random.random()))

    @_group_random.command('choice')
    async def _cmd_rand_choice(self, ctx: commands.Context, *items):
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        """

        assert len(items) > 0, "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"

        item = random.choice(items)
        phrase = random.choice([
            f'–ò–∏–∏... —è –≤—ã–±–∏—Ä–∞—é {item}',
            f'–ú–æ–π –≤—ã–±–æ—Ä: {item}',
            f'–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ {item}',
            f'{item}',
            '–Ø —â–∞—Å –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... –°–ø—Ä–æ—Å–∏ –µ—â—ë —Ä–∞–∑!'
        ])

        await ctx.reply(phrase)

    @_group_random.command('int')
    async def _cmd_rand_int(self, ctx: commands.Context, start: int, end: int):
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start:end]
        """

        assert start <= end, "start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <= end"

        await ctx.reply(str(random.randint(start, end)))

    @_group_random.command('range')
    async def _cmd_rand_range(self, ctx: commands.Context, start: int, end: int):
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start:end)
        """

        assert start < end, "start –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ end"

        await ctx.reply(str(random.randrange(start, end)))

    @commands.command('—à–∞—Ä', aliases=['ball', '—à', 'q'])
    async def _cmd_ball(self, ctx: commands.Context, *, question: str):
        """
        –ü—É—Å—Ç—å —à–∞—Ä —Å—É–¥—å–±—ã –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å
        """
        phrases = [
            "–î–∞",
            "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ",
            "100%",
            "–æ—á–µ–Ω—å –≤–µ—Ä–æ—è—Ç–Ω–æ",

            "–¥—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç",
            "–¥—É–º–∞—é –Ω–µ—Ç",
            "–®–∞–Ω—Å—ã —Ö–æ—Ä–æ—à–∏–µ",
            "–µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è",

            "—Ç–æ—á–Ω–æ –Ω–µ—Ç",
            "–ù–µ —è—Å–Ω–æ",
            "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ",
            "—Å–ø—Ä–æ—Å–∏—Ç–µ —Å–Ω–æ–≤–∞",
            "–Ω–µ —Å–µ–π—á–∞—Å",
        ]
        await ctx.reply(random.choice(phrases).capitalize().format(question))

    @commands.command('die')
    async def _cmd_die(self, ctx: commands.Context, count: int = 1):
        """
        –ë—Ä–æ—Å–∞–µ—Ç count —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤
        """
        assert 1 <= count <= 10, "Count –æ—Ç 1 –¥–æ 10 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
        results = [random.randint(1, 6) for _ in range(count)]
        total = sum(results)
        results = list(map(EMOJI_NUMBERS.get, results))
        await ctx.reply(
            embed=BotEmbed(ctx=ctx, description=" + ".join(results) + f" = {total}", colour=self.bot.colour))


async def setup(bot: Bot):
    await bot.add_cog(RandomCog(bot))
