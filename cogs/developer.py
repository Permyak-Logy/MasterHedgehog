import argparse
import asyncio
import datetime
import os
import subprocess
import sys

import discord
from discord.errors import Forbidden
from discord.ext import commands

import db_session
from PLyBot import Bot, Cog, ApiKey, join_string, Context
from db_session.base import Guild
from db_session.const import MIN_DATETIME

activate_parser = argparse.ArgumentParser()
activate_parser.add_argument('-A', action="store_true")


# TODO: –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤
# TODO: –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
class DeveloperCog(Cog, name="–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"):
    def __init__(self, bot: Bot):
        super().__init__(bot, emoji_icon="üõ†Ô∏è")

    @commands.group(name='sudo', alaises=['su'])
    @commands.is_owner()
    async def _group_sudo(self, ctx: Context):
        """–í—ã–∑–æ–≤ root –∫–æ–º–∞–Ω–¥"""
        await ctx.just_send_help()

    @_group_sudo.command(name='activate', aliases=['act'])
    @commands.is_owner()
    async def activate(self, ctx: Context, *, guild: discord.Guild = None):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        """
        guild: discord.Guild = guild or ctx.guild
        assert guild, "–ù–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä"
        cogs = list(filter(bool, map(self.bot.get_cog, self.bot.cogs)))
        activated = []
        with db_session.create_session() as session:
            for cog in cogs:
                if not (isinstance(cog, Cog) and cog.cls_config is not None):
                    continue
                config = cog.get_config(session, guild)
                if not hasattr(config, "active_until"):
                    continue
                config.active_until = None
                activated.append(f"`{cog.qualified_name}`")
            session.commit()
        activated = " | ".join(activated)
        embed = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!", description=f'–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥—É–ª–∏:\n\n'
                                                            f'{activated}', colour=self.bot.colour_embeds)
        await ctx.send(embed=embed)

    @_group_sudo.command(aliases=['deact'])
    @commands.is_owner()
    async def deactivate(self, ctx: Context, *, guild: discord.Guild = None):
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ –±–µ—Å—Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        """
        guild: discord.Guild = guild or ctx.guild
        assert guild, "–ù–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä"
        cogs = list(filter(bool, map(self.bot.get_cog, self.bot.cogs)))

        activated = []
        with db_session.create_session() as session:
            for cog in cogs:
                if not (isinstance(cog, Cog) and cog.cls_config is not None):
                    continue
                config = cog.get_config(session, guild)
                if not hasattr(config, "active_until"):
                    continue
                config.active_until = MIN_DATETIME
                activated.append(f'`{cog.qualified_name}`')

            session.commit()
        activated = " | ".join(activated)
        embed = discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!", description=f'–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –º–æ–¥—É–ª–∏:\n\t'
                                                            f'{activated}', colour=self.bot.colour_embeds)
        await ctx.send(embed=embed)

    @_group_sudo.command(aliases=['set_cau'])
    @commands.is_owner()
    async def set_cog_active_until(self, ctx: Context, guild: int, cog: str, date: str = None):
        """
        date –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ú–ú/–î–î/–ì–ì"
        """
        guild = self.bot.get_guild(guild)
        assert isinstance(guild, discord.Guild), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"

        cog = self.bot.get_cog(cog)
        assert isinstance(cog, Cog) and cog.cls_config is not None, "–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"

        if date is not None:
            try:
                date = datetime.datetime.strptime(date, "%x").date()
            except ValueError:
                assert False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"

        with db_session.create_session() as session:
            config = cog.get_config(session, guild)

            assert hasattr(config, "active_until"), "–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

            config.active_until = date
            session.commit()

        await ctx.send(embed=discord.Embed(
            title="–£—Å–ø–µ—Ö", description=f"–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {cog} —Å–µ—Ä–≤–µ—Ä–∞ {guild} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ –Ω–∞ {date}",
            colour=self.bot.colour_embeds))

    @_group_sudo.command(aliases=['get_cau'])
    @commands.is_owner()
    async def get_cog_active_until(self, ctx: Context, guild: int, cog: str):
        guild = self.bot.get_guild(guild)
        assert isinstance(guild, discord.Guild), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"

        cog = self.bot.get_cog(cog)
        assert isinstance(cog, Cog) and cog.cls_config is not None, "–î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"

        with db_session.create_session() as session:
            config = cog.get_config(session, guild)

            assert hasattr(config, "active_until"), "–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            embed = discord.Embed(title=f"–°–µ—Ä–≤–µ—Ä {guild}", description="–ú–æ–¥—É–ª—å {cog} –∞–∫—Ç–∏–≤–µ–Ω {msg}")
            if config.active_until:
                embed.description = embed.description.format(cog=cog, msg=f"–¥–æ {config.active_until}")
            else:
                embed.description = embed.description.format(cog=cog, msg=f"–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ")
            await ctx.send(embed=embed)

    # TODO: –°–¥–µ–ª–∞—Ç—å –±–∞–Ω –≥–∏–ª—å–¥–∏–∏, —Ä–∞–∑–±–∞–Ω –≥–∏–ª—å–¥–∏–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    @_group_sudo.command('guild', aliase=['—Å–µ—Ä–≤–µ—Ä'])
    @commands.is_owner()
    async def _group_guild(self, ctx: Context, guild: discord.Guild = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
        guild = guild or ctx.guild
        assert guild, "–ù–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä"

        statuses = list(map(lambda m: m.status, guild.members))
        types = list(map(lambda m: m.bot, guild.members))

        embed = discord.Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {guild}", colour=self.bot.colour_embeds).set_thumbnail(url=guild.icon_url)
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"\\üë• –í—Å–µ–≥–æ: **{guild.member_count}**\n"
                                                f"\\üë§ –õ—é–¥–µ–π: **{types.count(False)}**\n"
                                                f"\\ü§ñ –ë–æ—Ç–æ–≤: **{types.count(True)}**")

        statuses_text = ""
        count_online = statuses.count(discord.Status.online)
        count_idle = statuses.count(discord.Status.idle)
        count_dnd = statuses.count(discord.Status.dnd)
        count_offline = statuses.count(discord.Status.offline)
        if count_online:
            statuses_text += f"\\üü¢ –í —Å–µ—Ç–∏: **{count_online}**\n"
        if count_idle:
            statuses_text += f"\\üü† –ù–µ –∞–∫—Ç–∏–≤–µ–Ω: **{count_idle}**\n"
        if count_dnd:
            statuses_text += f"\\üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å: **{count_dnd}**\n"
        if count_offline:
            statuses_text += f"\\‚ö´ –ù–µ –≤ —Å–µ—Ç–∏: **{count_offline}**\n"
        embed.add_field(name="–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:", value=statuses_text)

        channels_text = f"\\üí¨ –í—Å–µ–≥–æ: {guild.channels.__len__()}\n"
        if guild.text_channels:
            channels_text += f"**#** –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{guild.text_channels.__len__()}**\n"
        if guild.voice_channels:
            channels_text += f"\\üîä –ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{guild.voice_channels.__len__()}**\n"
        if guild.stage_channels:
            channels_text += f"\\üì£ Stage: **{guild.stage_channels.__len__()}**\n"
        embed.add_field(name="–ö–∞–Ω–∞–ª—ã:", value=channels_text)

        embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=str(guild.owner))
        embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏:", value=str(guild.mfa_level or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
        embed.add_field(name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", value=str(guild.created_at.date()))
        with db_session.create_session() as session:
            embed.add_field(name="–ë–∞–Ω:", value="–ï—Å—Ç—å" if Guild.get(session, guild).ban_activity else "–ù–µ—Ç")
        embed.set_footer(text=f"ID: {guild.id}")
        await ctx.reply(embed=embed)

    @_group_sudo.command('ban_guild')
    @commands.is_owner()
    async def ban_guild(self, ctx: Context, guild: discord.Guild = None):
        """–ë–∞–Ω–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        guild = guild or ctx.guild
        assert guild, "–ù–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä"

        with db_session.create_session() as session:
            Guild.get(session, guild).ban_activity = True
            session.commit()
        await ctx.reply(f"–Ø —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä: {guild}")

    @_group_sudo.command('unban_guild')
    @commands.is_owner()
    async def unban_guild(self, ctx: Context, guild: discord.Guild = None):
        """–†–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""

        guild = guild or ctx.guild
        assert guild, "–ù–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä"

        with db_session.create_session() as session:
            Guild.get(session, guild).ban_activity = False
            session.commit()
        await ctx.reply(f"–Ø —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä: {guild}")

    @_group_sudo.command(name="–æ—Ç–ø—Ä", aliases=['send'])
    @commands.is_owner()
    async def send(self, ctx: Context, user: discord.User, *text: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–µ–∫—Å—Ç–æ–º
        """
        async with ctx.typing():
            async with user.typing():
                text = join_string(text)
                await asyncio.sleep(len(text) * 0.2)
                try:
                    await user.send(text)
                except Forbidden as E:
                    await ctx.send(str(E))
                else:
                    await ctx.send("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")

    @_group_sudo.command(name="–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", aliases=['reboot'])
    @commands.is_owner()
    async def reboot(self, ctx: Context, delay: int = 5):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–æ—Ç–∞
        """

        await ctx.reply(embed=discord.Embed(description=f"–•–æ—Ä–æ—à–æ. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ {delay} —Å–µ–∫."))
        subprocess.Popen([sys.executable, 'rebooter.py', str(delay), str(os.getpid())])
        await asyncio.sleep(delay - 1)
        self.bot.is_ready()
        await self.bot.logout()

    @_group_sudo.command(name="–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", aliases=['logout', 'exit', 'disconnect', 'close'])
    @commands.is_owner()
    async def logout(self, ctx: Context):
        """
        –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        """
        self.bot.active_auto_save = False
        delay = 5
        await ctx.message.delete(delay=delay)
        await ctx.send(embed=discord.Embed(
            title="–°–∏—Å—Ç–µ–º–∞",
            description="–í—ã–ø–æ–ª–Ω—è—é –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ",
            colour=self.bot.colour_embeds,
            delete_after=delay))
        await asyncio.sleep(delay + 1)
        await self.bot.logout()

    @_group_sudo.command()
    @commands.is_owner()
    async def ctrl_c(self, ctx: Context):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É KeyboardInterrupt
        """
        await ctx.send(
            embed=discord.Embed(title="–°–∏—Å—Ç–µ–º–∞", description="–í—ã–ø–æ–ª–Ω—è—é ctrl + C", colour=self.bot.colour_embeds))
        await asyncio.sleep(1)
        raise KeyboardInterrupt()


def setup(bot: Bot):
    bot.add_cog(DeveloperCog(bot))
