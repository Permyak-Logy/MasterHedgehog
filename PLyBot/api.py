import json
import secrets
from datetime import datetime

import discord
from discord.ext import commands
from flask import Blueprint
from flask import request, jsonify
from sqlalchemy import Column, String, Integer, DateTime, ForeignKey

import db_session
from PLyBot.bot import Cog, Bot
from db_session import SqlAlchemyBase
from db_session.const import DEFAULT_ACCESS
from .const import HeadersApi, STATUS_ABOUT
from .extra import Permissions

ATTRS_BOOL = {"admin", "everyone", "active"}
ATTRS_INT = {"min_client_time", "min_member_time", "min_role"}
ATTRS_LIST = {"roles", "users", "channels", "exc_roles", "exc_users", "exc_channels"}

JSON_STATUS = lambda s, msg=None: jsonify(status=s, msg=STATUS_ABOUT.get(s, "{msg}").format(msg=msg))


class ApiKey(SqlAlchemyBase):  # TODO: –ê—Å—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å
    __tablename__ = 'api_keys'

    key = Column(String, primary_key=True)
    permission = Column(Integer, nullable=False, default=Permissions.make())
    until_active = Column(DateTime)

    created_by = Column(Integer, ForeignKey('users.id'), nullable=False)
    created_at = Column(Integer, nullable=False, default=datetime.now)
    created_for_guild = Column(Integer, ForeignKey('guilds.id'), nullable=False)

    @staticmethod
    def get(session: db_session.Session, key: str):
        return session.query(ApiKey).filter(ApiKey.key == key).first()

    def gen(self, ctx, permission_flags=0, until_active: datetime = None):
        self.key = secrets.token_hex(32)
        self.permission = Permissions.make()
        self.until_active = datetime.now()

        self.created_by = ctx.author.id
        self.created_for_guild = ctx.guild.id

        self.until_active = until_active
        self.permission = permission_flags

    def __repr__(self):
        return f"ApiKey"

    def __str__(self):
        return repr(self)


class AccessCog(Cog, name="Access Master –Å–∂–∞"):
    def __init__(self, bot):
        super().__init__(bot, emoji_icon='üõ°Ô∏è')
        self.bot.add_cog_blueprint(KeysApiBP(self), url_prefix='/access')
        self.bot.add_blueprint(HintsBP(self.bot).blueprint, url_prefix='/hints')
        self.bot.add_models(ApiKey)

    async def cog_check(self, ctx: commands.Context):
        # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å
        # if ctx.author.guild_permissions.administrator:
        #     return True
        return await self.bot.is_owner(ctx.author)

    @staticmethod
    async def format_access(ctx: commands.Context, embed: discord.Embed, access: dict):
        for key, (val, lvl) in access.items():
            if 'channels' in key:
                val = "\n".join(
                    ctx.bot.get_channel(id_).mention for id_ in val if ctx.bot.get_channel(id_) is not None) or []
            if 'users' in key:
                val = "\n".join(ctx.bot.get_user(id_).mention for id_ in val if ctx.bot.get_user(id_) is not None) or []
            if 'roles' in key:
                val = "\n".join(
                    ctx.guild.get_role(id_).mention for id_ in val if ctx.guild.get_role(id_) is not None) or []
            if isinstance(val, bool):
                val = "–î–∞" if val else "–ù–µ—Ç"
            if not val:
                val = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            embed.add_field(name=key, value=str(val) + "*" * lvl)

    # TODO: –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ cog –∏–ª–∏ command
    @commands.command(name='–¥–æ—Å—Ç—É–ø', aliases=['acc', 'access'])
    @commands.guild_only()
    async def get_access_cmd(self, ctx: commands.Context, name: str):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ name=="DEF", —Ç–æ –ø–æ–∫–∞–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        """
        command = self.bot.get_command(name)
        if command is None:
            cog = self.bot.get_cog(name)
        else:
            cog = command.cog
        assert not (command is None and cog is None), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞"

        if not isinstance(cog, Cog):
            assert command is None, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤"
            assert isinstance(cog, Cog) and cog.cls_config is not None, "–ú–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤"

        session = db_session.create_session()
        access = cog.get_config(session, ctx.guild).get_access()[str(command)]
        session.close()

        await ctx.send("```json\n" + json.dumps(access, indent=4) + "\n```")

    # TODO: –ü–æ–¥–¥–µ–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    @commands.command(name='—É—Å—Ç–¥–æ—Å—Ç—É–ø', aliases=['set_acc', 'setacc', 'set_access', '=acc'])
    @commands.guild_only()
    async def set_access_cmd(self, ctx: commands.Context, name: str, attr: str = None, *args: int):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–ø—É—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        –ï—Å–ª–∏ command == "ALL" —Ç–æ –≤—ã—à–ª–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è, –∏–Ω–∞—á–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        –ï—Å–ª–∏ attr == "DEF" —Ç–æ –≤—ã—Å—Ç–∞–≤–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∞—Ç—Ä–∏–±—É—Ç
        args –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ (0 == false, 1 == true –µ—Å–ª–∏ bool —Ç–∏–ø), –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        (–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
        """
        command = self.bot.get_command(name)
        if command is None:
            cog = self.bot.get_cog(name)
        else:
            cog = command.cog
        assert not (command is None and cog is None), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞"

        check = isinstance(cog, Cog) and cog.cls_config is not None
        assert check or command is None, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤"
        assert check, "–ú–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∞–≤"

        assert attr in ATTRS_BOOL | ATTRS_INT | ATTRS_LIST or attr is None, f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä '{attr}'"

        session = db_session.create_session()
        config = cog.get_config(session, ctx.guild)
        access = config.get_access()
        change_access = access["__cog__" if command is None else str(command)]
        if attr is None:
            change_access.clear()
        elif args:
            if attr in ATTRS_BOOL:
                change_access[attr] = bool(args[0])
            elif attr in ATTRS_INT:
                change_access[attr] = int(args[0])
            elif attr in ATTRS_LIST:
                change_access[attr] = list(map(int, args))
        else:
            del change_access[attr]
        config.set_access(access)
        session.commit()
        session.close()

        await ctx.send(embed=discord.Embed(title="–£—Å–ø–µ—à–Ω–æ!", description="–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"))

    @commands.command(name='+–¥–æ—Å—Ç—É–ø', aliases=['+access', '+acc'])
    @commands.guild_only()
    async def access_cmd(self, ctx: commands.Context, command_name: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        """
        command = self.bot.get_command(command_name)
        assert command is not None, f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ '{command_name}'"

        cog = command.cog

        assert isinstance(cog, Cog), "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∞–≤"
        assert cog.cls_config is not None, "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∞–≤"

        session = db_session.create_session()
        access = cog.get_config(session, ctx.guild).get_access()
        session.close()

        access_cmd = access[str(command)]
        access_cog = access["__cog__"]

        def access_get(__key):
            val = access_cmd.get(__key) or access_cog.get(__key) or DEFAULT_ACCESS[__key]
            if __key in access_cmd:
                lvl = 0
            elif __key in access_cog:
                lvl = 1
            else:
                lvl = 2
            return val, lvl

        pre_access = {}
        for key in DEFAULT_ACCESS.keys():
            pre_access[key] = access_get(key)
        pre_access["command"] = (command_name, 0)
        embed = discord.Embed(
            title=f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ \"{command_name}\""
        )
        await self.format_access(ctx, embed, pre_access)
        await ctx.send(embed=embed)

    @commands.command(name='–∫–æ–º–ø', aliases=['–º–æ–¥—ã', 'mods', '–º–æ–¥—É–ª–∏', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'])
    @commands.guild_only()
    async def get_modules(self, ctx: commands.Context):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –≤–∞–º –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        """
        session = db_session.create_session()
        text = []
        for name in sorted(self.bot.cogs.keys()):
            cog: Cog = self.bot.get_cog(name)

            elem = []

            if await self.bot.is_owner(ctx.author):
                config = cog.cls_config.__tablename__ if cog.cls_config else "–ù–µ—Ç"
                elem.append(f'–∫–æ–Ω—Ñ–∏–≥={config}')

            if cog.cls_config is not None and hasattr(cog.cls_config, "active_until"):
                date = cog.get_config(session, ctx.guild).active_until
            else:
                date = None
            elem.append(f'–∞–∫—Ç–∏–≤–µ–Ω{"=–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ" if date is None else f"_–¥–æ={date}"}')

            text.append(f'{name.ljust(len(max(self.bot.cogs.keys(), key=len)), " ")} [{"; ".join(elem)}]')

        if text:
            await ctx.send("```python\n" + "\n".join(text) + "\n```")
        else:
            await ctx.send("```python\n–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π\n```")


class BaseApiBP:
    blueprint: Blueprint

    def __init__(self, cog: Cog):
        self.cog = cog

        self.blueprint.before_request(self.before_check_request)
        self.blueprint.route('/')(self.index)
        if cog.cls_config and hasattr(cog.cls_config, 'access'):
            self.blueprint.route('/access', methods=['GET', 'POST'])(self.access)

    def get_routes(self):
        return _GetRuleFromSetupState()(self.blueprint)

    def index(self):
        return jsonify(sections=list(self.get_routes().keys() - {'/'}))

    def access(self):
        with db_session.create_session() as session:
            if request.method == 'GET':
                access = self.cog.get_config(session, request.headers[HeadersApi.GUILD_ID]).get_access()
                access['__default__'] = DEFAULT_ACCESS.copy()
                return jsonify(guild_id=int(request.headers[HeadersApi.GUILD_ID]),
                               cog=self.cog.qualified_name,
                               access=access)
            elif request.method == 'POST':
                return jsonify(status='ok')

    def before_check_request(self):
        guild_id = request.headers.get(HeadersApi.GUILD_ID)
        api_key = request.headers.get(HeadersApi.API_KEY)
        if not guild_id or not api_key:
            return JSON_STATUS(400)
        if self.cog.cls_config:
            with db_session.create_session() as session:
                if not self.cog.get_config(session, guild_id):
                    return JSON_STATUS(400)


class HintsBP:
    blueprint = Blueprint('hints_api', __name__)

    def __init__(self, bot: discord.Client):
        self.bot = bot
        self.load()

    def load(self):
        @self.blueprint.route('/guild', methods=['GET'])
        def hint_guild():
            nonlocal self
            if set(request.json.keys()) ^ {"guild_id"}:
                return JSON_STATUS(400)

            guild: discord.Guild = self.bot.get_guild(request.json['guild_id'])
            if not guild:
                return JSON_STATUS(404)

            return jsonify(status=202, msg=STATUS_ABOUT[202], guild={
                "guild_id": guild.id,
                "name": guild.name,
                "icon_url": str(guild.icon_url)

            })

        @self.blueprint.route('/member', methods=['GET'])
        def hint_member():
            nonlocal self
            if set(request.json.keys()) ^ {"user_id", "guild_id"}:
                return JSON_STATUS(400)

            guild: discord.Guild = self.bot.get_guild(request.json['guild_id'])
            if not guild:
                return JSON_STATUS(404)

            member: discord.Member = guild.get_member(request.json['user_id'])
            if not member:
                return JSON_STATUS(404)

            return jsonify(status=202, msg=STATUS_ABOUT[202], member={
                "guild_id": guild.id,
                "user_id": member.id,
                "display_name": str(member.display_name)
            })

        @self.blueprint.route('/user', methods=['GET'])
        def hint_user():
            nonlocal self
            if set(request.json.keys()) ^ {"user_id"}:
                return JSON_STATUS(400)

            user: discord.User = self.bot.get_user(request.json['user_id'])
            if not user:
                return JSON_STATUS(404)

            return jsonify(status=202, msg=STATUS_ABOUT[202], user={
                "user_id": user.id,
                "display_name": str(user.display_name),
                "avatar_url": str(user.avatar_url)
            })

        @self.blueprint.route('/channel', methods=['GET'])
        def hint_channel():
            nonlocal self
            if set(request.json.keys()) ^ {"channel_id"}:
                return JSON_STATUS(400)
            return JSON_STATUS(204)


class KeysApiBP(BaseApiBP):
    blueprint = Blueprint('keys_api', __name__)


class _GetRuleFromSetupState:
    """–≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Å–ª—É–∂–∏—Ç —á–∏—Å—Ç–æ –¥–ª—è –≤—ã–∫–∞—á–∫–∏ –∏–∑ blueprint.deferred_functions routes –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ
    –º–µ—Ç–æ–¥–æ–º blueprint.route"""

    def __init__(self, blueprint: Blueprint = None):
        self.__blueprint = blueprint

    def __call__(self, blueprint: Blueprint = None):
        if not self.__blueprint and not blueprint:
            return {}

        result = {}
        for func in (self.__blueprint or blueprint).deferred_functions:
            try:
                rule, endpoint, f, options = func(self)
                result[rule] = (endpoint, f, options)
            except AttributeError:
                pass
        return result

    @staticmethod
    def add_url_rule(rule, endpoint, f, **options):
        return rule, endpoint, f, options


def setup(bot: Bot):
    bot.add_cog(AccessCog(bot))
